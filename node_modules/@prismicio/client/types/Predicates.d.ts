declare type PredicateValue = boolean | string | number | Date;
declare const _default: {
    at(fragment: string, value: string | number | boolean | Date | PredicateValue[]): string;
    not(fragment: string, value: string | number | boolean | Date | PredicateValue[]): string;
    missing(fragment: string): string;
    has(fragment: string): string;
    any(fragment: string, values: PredicateValue[]): string;
    in(fragment: string, values: string[]): string;
    fulltext(fragment: string, value: string): string;
    similar(documentId: string, maxResults: number): string;
    date: {
        before(fragment: string, before: PredicateValue): string;
        after(fragment: string, after: PredicateValue): string;
        between(fragment: string, before: PredicateValue, after: PredicateValue): string;
        dayOfMonth(fragment: string, day: number): string;
        dayOfMonthAfter(fragment: string, day: number): string;
        dayOfMonthBefore(fragment: string, day: number): string;
        dayOfWeek(fragment: string, day: string | number): string;
        dayOfWeekAfter(fragment: string, day: string | number): string;
        dayOfWeekBefore(fragment: string, day: string | number): string;
        month(fragment: string, month: string | number): string;
        monthBefore(fragment: string, month: string | number): string;
        monthAfter(fragment: string, month: string | number): string;
        year(fragment: string, year: number): string;
        hour(fragment: string, hour: number): string;
        hourBefore(fragment: string, hour: number): string;
        hourAfter(fragment: string, hour: number): string;
    };
    dateBefore: (fragment: string, before: PredicateValue) => string;
    dateAfter: (fragment: string, after: PredicateValue) => string;
    dateBetween: (fragment: string, before: PredicateValue, after: PredicateValue) => string;
    dayOfMonth: (fragment: string, day: number) => string;
    dayOfMonthAfter: (fragment: string, day: number) => string;
    dayOfMonthBefore: (fragment: string, day: number) => string;
    dayOfWeek: (fragment: string, day: string | number) => string;
    dayOfWeekAfter: (fragment: string, day: string | number) => string;
    dayOfWeekBefore: (fragment: string, day: string | number) => string;
    month: (fragment: string, month: string | number) => string;
    monthBefore: (fragment: string, month: string | number) => string;
    monthAfter: (fragment: string, month: string | number) => string;
    year: (fragment: string, year: number) => string;
    hour: (fragment: string, hour: number) => string;
    hourBefore: (fragment: string, hour: number) => string;
    hourAfter: (fragment: string, hour: number) => string;
    number: {
        gt(fragment: string, value: number): string;
        lt(fragment: string, value: number): string;
        inRange(fragment: string, before: number, after: number): string;
    };
    gt: (fragment: string, value: number) => string;
    lt: (fragment: string, value: number) => string;
    inRange: (fragment: string, before: number, after: number) => string;
    near: (fragment: string, latitude: number, longitude: number, radius: number) => string;
    geopoint: {
        near(fragment: string, latitude: number, longitude: number, radius: number): string;
    };
};
export default _default;
