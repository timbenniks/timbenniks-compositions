import Pusher from 'pusher-js';

/** Shape of the GET response from /api/v1/canvas-definitions */
declare type ComponentDefinitionAPIResponse = {
    componentDefinitions: Array<ComponentDefinition>;
};
/** Shape of the PUT request body for /api/v1/canvas-definitions */
declare type ComponentDefinitionAPIPutRequest = {
    componentDefinition: CreatingComponentDefinition;
    projectId: string;
};
/** Shape of the DELETE request body for /api/v1/canvas-definitions */
declare type ComponentDefinitionAPIDeleteRequest = {
    /** Public ID of the component definition to delete */
    componentId: string;
    /** Project ID that the component definition lives on */
    projectId: string;
};
/** Query parameter options for GET /api/v1/canvas-definitions */
declare type ComponentDefinitionListAPIOptions = {
    /** Limit list to one result by ID (response remains an array) */
    componentId?: string;
    /** Number of records to skip */
    offset?: number;
    /** Max number of records to return (defaults to 100) */
    limit?: number;
    projectId: string;
};
/** The definition of a component parameter */
declare type ComponentDefinitionParameter<TConfig = unknown> = {
    /** Public ID of the parameter (used in code). Do not change after creation. */
    id: string;
    /** Friendly name of the parameter */
    name: string;
    /** Type name of the parameter (provided by a Uniform integration) */
    type: string;
    /** The configuration object for the type (type-specific) */
    typeConfig?: TConfig;
};
/** The definition of a component variant */
declare type ComponentDefinitionVariant = {
    /** Public ID of the variant (used in code). Do not change after creation. */
    id: string;
    /** Friendly name of the variant */
    name: string;
};
/** The definition of a named component slot that can contain other components */
declare type ComponentDefinitionSlot = {
    /** Public ID of the slot (used in code). Do not change after creation. */
    id: string;
    /** Friendly name of the slot */
    name: string;
    /** Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant. */
    inheritAllowedComponents: boolean;
    /** A list of component definition public IDs that are allowed in this named slot */
    allowedComponents: Array<string>;
    /** Minimum valid number of components in this slot */
    minComponents?: number;
    /** Maximum valid number of components in this slot */
    maxComponents?: number;
};
/** Defines a component type that can live on a Composition */
declare type ComponentDefinition = {
    /** Public ID of the component (used in code). Do not change after creation. */
    id: string;
    /** Friendly name of the component definition */
    name: string;
    /** Icon name for the component definition (e.g. 'screen') */
    icon: string;
    /**
     * The public ID of the parameter whose value should be used to create a display title for this component in the UI.
     * The parameter type must support being used as a title parameter for this to work.
     */
    titleParameter?: string | null;
    /** Whether this component type can be the root of a composition. If false, this component is only used within slots on other components. */
    canBeComposition?: boolean;
    /** The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
    parameters?: Array<ComponentDefinitionParameter>;
    /** The named slots for this component; placement areas where arrays of other components can be added. */
    slots?: Array<ComponentDefinitionSlot>;
    /** Named variants for this component; enables creation of visual variants that use the same parameter data/ */
    variants?: Array<ComponentDefinitionVariant>;
    /** Created date string for this definition */
    created?: string;
    /** Modified date string for this definition */
    modified?: string;
};
/** Defines a component type that can live on a Composition, when it is being created or updated */
declare type CreatingComponentDefinition = Omit<Partial<ComponentDefinition>, 'created' | 'modified' | 'id' | 'name'> & {
    id: string;
    name: string;
};

/** @deprecated use CANVAS_DRAFT_STATE and CANVAS_PUBLISHED_STATE instead */
declare type CompositionFetchState = 'preview' | 'published' | number;
/** The GET response from /api/v1/canvas when `component` or `slug` params are specified */
declare type CompositionAPIResponse = {
    /** The state of the layout. See CANVAS_DRAFT_STATE and CANVAS_PUBLISHED_STATE. */
    state: number;
    /** The project ID that this layout data is part of */
    projectId: string;
    /** Layout data being read or written */
    composition: RootComponentInstance;
    /** Whether this composition is a pattern (can be referenced by other compositions) */
    pattern: boolean;
    /** Created date string for this definition */
    created?: string;
    /** Modified date string for this definition */
    modified?: string;
};
/** Shape of the PUT request body for /api/v1/canvas */
declare type CompositionAPIPutRequest = Omit<CompositionAPIResponse, 'projectId'> & {
    projectId: string;
};
/** Shape of the DELETE request body for /api/v1/canvas */
declare type CompositionAPIDeleteRequest = {
    /** Public ID of the composition to delete */
    compositionId: string;
    /** Project ID that the composition lives on. */
    projectId: string;
    /** The state to delete. If unspecified, all states will be deleted. See CANVAS_DRAFT_STATE and CANVAS_PUBLISHED_STATE. */
    state?: number;
};
/** The GET response from /api/v1/canvas when `component` or `slug` are not specified */
declare type CompositionListAPIResponse = {
    compositions: Array<CompositionAPIResponse>;
};
/** Query parameter options for GET /api/v1/canvas */
declare type CompositionAPIOptions = {
    /** Specify a single composition ID to fetch. Changes response from list to single. */
    compositionId?: string;
    /** Specify a single composition to fetch by slug. Changes response from list to single. */
    slug?: string;
    /** The project the composition(s) are on. */
    projectId: string;
    /** The component type to filter by */
    type?: string;
    /** Number of records to skip */
    offset?: number;
    /** Max number of records to return (defaults to 100) */
    limit?: number;
    /** State of compositions to fetch. Default = 'published' */
    state?: number;
    /**
     * Signals a Canvas enhancer proxy to skip processing enhancements to the data and return raw data only.
     * This improves performance if you do not require enhanced component data.
     * If calling the Canvas API directly with no enhancer proxy, this has no effect.
     */
    skipEnhance?: boolean;
    /**
     * If true, any pattern references in the composition will be left unresolved.
     * This is appropriate if you intend to serialize the composition data without pattern
     * data embedded into it, and serialize the pattern data separately.
     */
    skipPatternResolution?: boolean;
};
declare type ComponentParameter<TValue = unknown> = {
    /** The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
    type: string;
    /**
     * The value of the parameter.
     * Any JSON-serializable value is acceptable.
     */
    value: TValue;
};
/**
 * Defines the shape of a component instance served by the composition API.
 */
declare type ComponentInstance = {
    /** Type of the component instance (public_id of its definition) */
    type: string;
    /** Component parameter values for the component instance */
    parameters?: Record<string, ComponentParameter>;
    /** Public ID of alternate visual appearance for this component, if any selected */
    variant?: string;
    /** Slots containing any sub-components */
    slots?: Record<string, ComponentInstance[]>;
    /** Data for the component instance, provided by a component enhancer. Never set in unenhanced data. */
    data?: Record<string, unknown>;
    /** Indicates this component instance should be sourced from a pattern library pattern */
    _pattern?: string;
    /**
     * If an error occurs resolving a pattern reference, it is left unresolved and this property is set to indicate why.
     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
     */
    _patternError?: 'CYCLIC' | 'NOTFOUND';
};
/** Defines the shape of the root component in a composition */
declare type RootComponentInstance = ComponentInstance & {
    /** The public UUID of the composition. */
    _id?: string;
    /** Slug pattern of this component. */
    _slug?: string | null;
    /** Friendly name of this component. */
    _name?: string;
};

/**
 * Pusher-js is large (80k) and not tree shakable so it is always bundled if directly referenced,
 * when it's only needed during preview mode. To avoid bundling it for all, we use an old-school
 * write-a-script-tag hack to load it in a poor man's approximation of a dynamic import ;)
 */
declare type ChannelSubscription = {
    addEventHandler: (eventName: string, handler: (data: unknown) => void) => () => void;
    unsubscribe: () => void;
};
declare type PreviewEventBus = {
    subscribe: (channel: string) => ChannelSubscription;
};
declare global {
    interface Window {
        Pusher?: typeof Pusher;
        __UNIFORM_EVENT_BUS__?: PreviewEventBus;
    }
}
/**
 * Creates an event bus client to receive updates from Canvas
 * IMPORTANT: in a server-side context this will always return undefined
 * IMPORTANT: in a browser context this is cached in window and does not create multiple instances
 */
declare function createEventBus(): Promise<PreviewEventBus | undefined>;

export { ComponentInstance as C, PreviewEventBus as P, RootComponentInstance as R, ComponentParameter as a, CompositionAPIOptions as b, CompositionListAPIResponse as c, CompositionAPIResponse as d, CompositionAPIPutRequest as e, CompositionAPIDeleteRequest as f, ComponentDefinitionListAPIOptions as g, ComponentDefinitionAPIResponse as h, ComponentDefinitionAPIPutRequest as i, ComponentDefinitionAPIDeleteRequest as j, ComponentDefinitionParameter as k, ComponentDefinitionVariant as l, ComponentDefinitionSlot as m, ComponentDefinition as n, CreatingComponentDefinition as o, CompositionFetchState as p, ChannelSubscription as q, createEventBus as r };
