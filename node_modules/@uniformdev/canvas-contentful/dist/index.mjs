import{createBatchEnhancer as S,UniqueBatchEntries as T,createLimitPolicy as R}from"@uniformdev/canvas";var w=class{constructor(t){this._clients={},Array.isArray(t)?t.forEach(n=>this.addClient(n)):t&&this.addClient(t)}addClient({source:t="default",client:n,previewClient:o}){if(this._clients[t])throw new Error(`The source ${t} is always registered`);if(!n)throw new Error("You must provide a Contentful client for the ContentfulClientList");this._clients[t]={client:n,previewClient:o||n}}getClient({source:t="default",isPreviewClient:n}){let o=this._clients[t];if(!!o)return n?o.previewClient:o.client}};var P={select:"fields",include:1},O=Object.freeze(["contentfulEntry"]);function V(e){return e instanceof w}function Y({client:e,previewClient:t,createQuery:n,useBatching:o,limitPolicy:d}){if(!e)throw new Error("No Contentful clients were provided to the enhancer. You must provide at least one client via the `client` or `clients` property.");let E=(()=>{if(V(e))return e;let c=new w;return c.addClient({client:e,previewClient:t}),c})(),g=d||R({throttle:{limit:55,interval:1e3}});return o?S({handleBatch:async c=>{var y;let i=c.reduce((r,l)=>{let{parameter:p,parameterName:m,component:v,context:a}=l.args,u=p.value;if(!b(u))return r;let f=$({parameterValue:u,parameterName:m,clients:E,component:v,context:a}),s="";if(h(u))s="legacy-group";else{let{source:L="default"}=u;s=L}return r[s]&&Array.isArray(r[s].tasks)?r[s].tasks.push(l):r[s]={client:f,tasks:[l]},r},{});try{console.time("fetch all entries");for await(let[r,l]of Object.entries(i)){let{context:p,component:m}=l.tasks[0].args,v=(y=n==null?void 0:n({component:m,defaultQuery:{...P},context:p}))!=null?y:P,a=new T(l.tasks,f=>h(f.parameter.value)?f.parameter.value:f.parameter.value.entryId),u=Object.keys(a.groups);console.time(`fetch entries ${r}`);try{(await l.client.getEntries({"sys.id[in]":u.join(","),limit:u.length,...v})).items.forEach(s=>{a.resolveKey(s.sys.id,s)}),a.resolveRemaining(null)}finally{console.timeEnd(`fetch entries ${r}`)}}console.timeEnd("fetch all entries")}catch(r){let l=x(r),p=new Error(`Failed loading Contentful entries batch (${c.length}) ${l}`);c.forEach(m=>m.reject(p))}},shouldQueue:({parameter:c})=>A(c),limitPolicy:g}):{enhanceOne:async function({parameter:i,parameterName:y,component:r,context:l}){var p,m;if(A(i)){if(!b(i.value))return null;let v=$({clients:E,parameterName:y,parameterValue:i.value,component:r,context:l}),a=h(i.value)?i.value:i.value.entryId,u=(p=n==null?void 0:n({parameter:i,parameterName:y,component:r,defaultQuery:{...P},context:l}))!=null?p:P;try{return console.time(`fetch entry ${a}`),await v.getEntry(a,u)}catch(f){let s=x(f);throw h(i.value)?new Error(`Failed loading Contentful entry '${i.value}' referenced in parameter '${y}': ${s}`):new Error(`Failed loading Contentful entry '${a}' from source '${(m=i.value.source)!=null?m:"default"}' referenced in parameter '${y}': ${s}`)}finally{console.timeEnd(`fetch entry ${a}`)}}},limitPolicy:g}}function A(e){var t;return e.type===O[0]&&(((t=e.value)==null?void 0:t.entryId)||typeof e.value=="string")}function x(e){return typeof e=="string"?e:typeof e=="object"&&e&&"error"in e?e.error:e instanceof Error?e.toString():JSON.stringify(e,null,2)}function h(e){return typeof e=="string"}function b(e){return!(!e||!h(e)&&!e.entryId)}function $({clients:e,parameterValue:t,parameterName:n,component:o,context:d}){if(h(t)){let g=e.getClient({isPreviewClient:d.preview});if(!g)throw new Error(`Parameter '${n}' in component '${o.type}' has a value '${t}' that is not compatible with multi-space/environment usage. If you wish to use multiple spaces/environments, you must convert your Canvas component parameters to the multi-space/environment compatible version. Otherwise, you can continue to use your parameters as-is, but must specify one of the clients provided to the Contentful enhancer as the 'default' client by registering it without specifying a source key.`);return g}let{source:C="default"}=t,E=e.getClient({source:C,isPreviewClient:d.preview});if(!E)throw new Error(`No Contentful client could be resolved for source key '${C}' referenced in parameter '${n} in component '${o.type}'. Ensure that the 'clients' property you are passing to the enhancer has a client instance registered for the source key.`);return E}import{documentToHtmlString as k}from"@contentful/rich-text-html-renderer";var M=({parameter:e})=>{var t,n,o;return typeof((t=e.value)==null?void 0:t.fields)!="object"||Object.entries((o=(n=e.value)==null?void 0:n.fields)!=null?o:{}).forEach(([d,C])=>{typeof C=="object"&&"nodeType"in C&&C.nodeType==="document"&&(e.value.fields[d]=k(C))}),e.value};export{O as CANVAS_CONTENTFUL_PARAMETER_TYPES,w as ContentfulClientList,M as contentfulRichTextToHtmlEnhancer,Y as createContentfulEnhancer};
