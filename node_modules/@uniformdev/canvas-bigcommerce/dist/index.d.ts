import { EnhancerContext, ComponentParameter, ComponentInstance, LimitPolicy, ComponentParameterEnhancer } from '@uniformdev/canvas';

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths {
    '/catalog/products': {
        /** Returns a list of **Products**. Optional filter parameters can be passed in. */
        get: operations['getProducts'];
        /**
         * Updates products in batches. At the time of writing, batches are limited to 10 products.
         *
         * **Required Fields**
         * * `id` - product `id` is required for batch updates to products.
         *
         * **Read-Only Fields**
         * - `id`
         * - `date_created`
         * - `date_modified`
         * - `calculated_price`
         * - `base_variant_id`
         */
        put: operations['updateProducts'];
        /**
         * Creates a *Product*. Only one product can be created at a time.
         *
         * **Required Fields:**
         * - `name`
         * - `type`
         * - `weight`
         * - `price`
         *
         * **Read-Only Fields**
         * - `id`
         * - `date_created`
         * - `date_modified`
         * - `calculated_price`
         * - `base_variant_id`
         *
         * **Usage Notes**
         * * `POST` requests to `/products` accepts a single `video` object; to send an array of video objects, see: `/products/{product_id}/videos`.
         */
        post: operations['createProduct'];
        /**
         * To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
         *
         * **Example**:
         * To delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
         */
        delete: operations['deleteProducts'];
    };
    '/catalog/products/{product_id}': {
        /** Returns a single *Product*. Optional parameters can be passed in. */
        get: operations['getProductById'];
        /**
         * Updates a *Product*.
         *
         * **Read-Only Fields**
         * - id
         * - date_created
         * - date_modified
         * - calculated_price
         * - base_variant_id
         */
        put: operations['updateProduct'];
        /** Deletes a *Product*. */
        delete: operations['deleteProductById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/images': {
        /** Returns a list of *Product Images*. Optional parameters can be passed in. */
        get: operations['getProductImages'];
        /**
         * Creates a *Product Image*.
         *
         *  **Required Fields**
         * - `image_file`, or
         * - `image_url`
         *
         * **Usage Notes**
         * - `image_url` - `255` character limit
         * - For file uploads, use the `multipart/form-data` media type
         * - Only one image at a time can be created
         * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
         */
        post: operations['createProductImage'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/images/{image_id}': {
        /** Returns a single *Product Image*. Optional parameters can be passed in. */
        get: operations['getProductImageById'];
        /**
         * Updates a *Product Image*.
         *
         * **Usage Notes**
         * - `image_url` - `255` character limit
         * - For file uploads, send a POST request using the `multipart/form-data` media type
         */
        put: operations['updateProductImage'];
        /** Deletes a *Product Image*. */
        delete: operations['deleteProductImage'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Image` that is being operated on. */
                image_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/videos': {
        /** Returns a list of *Product Videos*. Optional parameters can be passed in. */
        get: operations['getProductVideos'];
        /**
         * Creates a *Product Video*.
         *
         * **Required Fields**
         * * video_id - Example: https://www.youtube.com/watch?v=`R12345677`
         *
         * **Read-Only Fields**
         * * id
         *
         * Publicly accessible URLs are valid parameters.
         * Videos must be loaded through YouTube at this time.
         */
        post: operations['createProductVideo'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/videos/{id}': {
        /** Returns a single *Product Video*. Optional parameters can be passed in. */
        get: operations['getProductVideoById'];
        /**
         * Updates a *Product Video.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * * id
         */
        put: operations['updateProductVideo'];
        /** Deletes a *Product Video*. */
        delete: operations['deleteProductVideo'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The BigCommerce ID of the `Video` */
                id: parameters['VideoIdParam'];
            };
        };
    };
    '/catalog/products/{product_id}/variants': {
        /** Returns a list of product *Variants*. Optional parameters can be passed in. */
        get: operations['getVariantsByProductId'];
        /**
         * Creates a *Product Variant*.
         *
         * **Required Fields**
         * * sku
         * * option_values
         *
         * **Read-Only Fields**
         * * id
         *
         * Variants need to be created one at a time using this endpoint. To use a variant array and create products and variants in the same call use the [Create Products](/api-reference/catalog/catalog-api/products/createproduct) during the initial product creation.
         */
        post: operations['createVariant'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/variants/{variant_id}': {
        /** Returns a single product *Variant*. Optional parameters can be passed in. */
        get: operations['getVariantById'];
        /** Updates a product *Variant*. */
        put: operations['updateVariant'];
        /** Deletes a product *Variant*. */
        delete: operations['deleteVariantById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/variants/{variant_id}/metafields': {
        /** Returns a list of product variant *Metafields*. Optional parameters can be passed in. */
        get: operations['getVariantMetafieldsByProductIdAndVariantId'];
        /**
         * Creates a product variant *Metafield*.
         *
         * **Required Fields:**
         * * permission_set
         * * namespace
         * * key
         * * value
         *
         * **Read-Only Fields**
         * * id
         *
         * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        post: operations['createVariantMetafield'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}': {
        /** Returns a single product variant *Metafield*. Optional parameters can be passed in. */
        get: operations['getVariantMetafieldByProductIdAndVariantId'];
        /**
         * Updates a product variant *Metafield*.
         *
         * **Required Fields:**
         * * none
         *
         * **Read-Only Fields**
         * * id
         * * These fields can only be modified by the app (API credentials) that created the metafield:
         * 	* namespace
         * 	* key
         * 	* permission_set
         *
         * **Usage Notes**
         * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
         */
        put: operations['updateVariantMetafield'];
        /** Deletes a product variant *Metafield*. */
        delete: operations['deleteVariantMetafieldById'];
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/variants/{variant_id}/image': {
        /**
         * Creates a *Variant Image*.
         *
         * The image will show on the storefront when the value is selected.
         *
         *  **Required Fields**
         * - image_file: Form posts. Files larger than 1 MB are not accepted
         * - image_url: Any publicly available URL
         */
        post: operations['createVariantImage'];
    };
    '/catalog/products/{product_id}/options': {
        /** Returns a list of product *Variant Options*. Optional parameters can be passed in. */
        get: operations['getOptions'];
        /**
         * Creates a *Variant Option*.
         *
         * **Required Fields**
         * * display_name
         * * type
         * * option_values
         *
         * **Read-Only Fields**
         * * id
         *
         * **Notes**
         *
         * * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
         * * There are several examples listed below that create options, but the SKU’s are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
         * * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
         * * If more than one variant needs to be created use the [Create a Product](/api-reference/catalog/catalog-api/products/createproduct) endpoint.
         */
        post: operations['createOption'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/options/{option_id}': {
        /** Returns a single *Variant Option*. Optional parameters can be passed in. */
        get: operations['getOptionById'];
        /**
         * Updates a *Variant Option*.
         *
         * **Read-Only Fields**
         * * id
         */
        put: operations['updateOption'];
        /** Deletes a *Variant Option*. */
        delete: operations['deleteOptionById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/options/{option_id}/values': {
        /** Returns a list of all *Variant Option Values*. Optional parameters can be passed in. */
        get: operations['getOptionValues'];
        /**
         * Creates a *Variant Option Value*.
         *
         * **Required Fields**
         * * label
         * * sort_order
         *
         * **Read-Only Fields**
         * * id
         */
        post: operations['createOptionValue'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/options/{option_id}/values/{value_id}': {
        /** Returns a single *Variant Option Value*. Optional parameters can be passed in. */
        get: operations['getOptionValueById'];
        /**
         * Updates a *Variant Option Value*.
         *
         * **Read-Only Fields**
         * * id
         */
        put: operations['updateOptionValue'];
        /** Deletes a *Variant Option Value*. */
        delete: operations['deleteOptionValueById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/modifiers': {
        /** Returns a list of all *Product Modifiers*. Optional parameters can be passed in. */
        get: operations['getModifiers'];
        /**
         * Creates a *Product Modifier*.
         *
         * **Required Fields**
         * * `required`
         * * `display_name`
         * * `type`
         *
         * **Read-Only Fields**
         * * `id`
         */
        post: operations['createModifier'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/modifiers/{modifier_id}': {
        /** Returns a single *Product Modifier*. Optional parameters can be passed in. */
        get: operations['getModifierById'];
        /** Updates a *Product Modifier*. */
        put: operations['updateModifier'];
        /** Deletes a *Product Modifier*. */
        delete: operations['deleteModifierById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/modifiers/{modifier_id}/values': {
        /** Returns a list of all product *Modifier Values*. Optional parameters can be passed in. */
        get: operations['getModifierValues'];
        /**
         * Creates a *Modifier Value*.
         *
         * **Required Fields**
         * * label
         * * sort_order
         *
         * **Read-Only Fields**
         * * id
         */
        post: operations['createModifierValue'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}': {
        /** Returns a single *Modifier Value*. Optional parameters can be passed in. */
        get: operations['getModifierValueById'];
        /**
         * Updates a *Modifier Value*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * * id
         */
        put: operations['updateModifierValue'];
        /** Deletes a *Modifier Value*. */
        delete: operations['deleteModifierValueById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image': {
        /**
         * Creates a *Modifier Image*.
         *
         * The image will show on the storefront when the value is selected.
         *
         *  **Required Fields**
         * - image_file: Form posts are the only accepted upload option.
         */
        post: operations['createModifierImage'];
        /**
         * Deletes a *Modifier Image*.
         *
         * Deletes the image that was set to show when the modifier value is selected.
         */
        delete: operations['deleteModifierImage'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier`. */
                value_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/complex-rules': {
        /** Returns a list of all product *Complex Rules*. Optional parameters may be passed in. */
        get: operations['getComplexRules'];
        /**
         * Creates a product *Complex Rule*.
         *
         * **Required Fields**
         * - modifier_id
         * - modifier_value_id
         * - modifier_value_id
         * - variant_id
         *
         * **Read-Only Fields**
         * - complex_rule_id
         * - conditions_id
         * - rule_id
         * - combination_id
         * - id
         */
        post: operations['createComplexRule'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/complex-rules/{complex_rule_id}': {
        /** Returns a single *Complex Rule*. Optional parameters can be passed in. */
        get: operations['getComplexRuleById'];
        /**
         * Updates a *Complex Rule*.
         *
         * **Required Fields**:
         * - none
         *
         * **Read-Only Fields**:
         * - complex_rule_id
         * - conditions_id
         * - rule_id
         * - combination_id
         * - id
         */
        put: operations['updateComplexRule'];
        /** Deletes a product *Complex Rule*. */
        delete: operations['deleteComplexRuleById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `ComplexRule`. */
                complex_rule_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/custom-fields': {
        /** Returns a list of product *Custom Fields*. Optional parameters can be passed in. */
        get: operations['getCustomFields'];
        /**
         * Creates a *Custom Field*.
         *
         * **Required Fields:**
         * - name
         * - value
         *
         * **Read-Only:**
         * - id
         */
        post: operations['createCustomField'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/custom-fields/{custom_field_id}': {
        /** Returns a single *Custom Field*. Optional parameters can be passed in. */
        get: operations['getCustomFieldById'];
        /**
         * Updates a *Custom Field*.
         *
         * **Required Fields**
         * - none
         *
         * **Read-Only**
         * - id
         */
        put: operations['updateCustomField'];
        /** Deletes a product *Custom Field*. */
        delete: operations['deleteCustomFieldById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `CustomField`. */
                custom_field_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/bulk-pricing-rules': {
        /** Returns a list of *Bulk Pricing Rules*. Optional parameters can be passed in. */
        get: operations['getBulkPricingRules'];
        /**
         * Creates a *Bulk Pricing Rule*.
         *
         * **Required Fields**
         * - quantity_min
         * - quantity_max
         * - type
         * - amount
         *
         * **Read-Only Fields**
         * - id
         */
        post: operations['createBulkPricingRule'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
            };
        };
    };
    '/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}': {
        /** Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in. */
        get: operations['getBulkPricingRuleById'];
        /**
         * Updates a *Bulk Pricing Rule*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * - id
         */
        put: operations['updateBulkPricingRule'];
        /** Deletes a *Bulk Pricing Rule*. */
        delete: operations['deleteBulkPricingRuleById'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `BulkPricingRule`. */
                bulk_pricing_rule_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/metafields': {
        /** Returns a list of *Product Metafields*. Optional parameters can be passed in. */
        get: operations['getProductMetafieldsByProductId'];
        /**
         * Creates a *Product Metafield*.
         *
         * **Required Fields:**
         * * permission_set
         * * namespace
         * * key
         * * value
         *
         * **Read-Only Fields**
         * * id
         *
         * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        post: operations['createProductMetafield'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/metafields/{metafield_id}': {
        /** Returns a single *Product Metafield*. Optional parameters can be passed in. */
        get: operations['getProductMetafieldByProductId'];
        /**
         * Updates a *Product Metafield*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * * id
         * * These fields can only be modified by the app (API credentials) that created the metafield:
         * 	* namespace
         * 	* key
         * 	* permission_set
         *
         * **Usage Notes**
         * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
         */
        put: operations['updateProductMetafield'];
        /** Deletes a *Product Metafield*. */
        delete: operations['deleteProductMetafieldById'];
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/reviews': {
        /** Returns a list of all *Product Reviews*. Optional parameters can be passed in. */
        get: operations['getProductReviews'];
        /**
         * Creates a *Product Review*.
         *
         * **Required Fields**
         * - title
         * - date_reviewed
         *
         * **Read-Only Fields**
         * * id
         */
        post: operations['createProductReview'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
        };
    };
    '/catalog/products/{product_id}/reviews/{review_id}': {
        /** Returns a single *Product Review*. Optional parameters maybe passed in. */
        get: operations['getProductReviewById'];
        /**
         * Updates a *Product Review*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * * id
         */
        put: operations['updateProductReview'];
        /** Deletes a *Product Review*. */
        delete: operations['deleteProductReview'];
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `review` that is being operated on. */
                review_id: number;
            };
        };
    };
    '/catalog/categories': {
        /** Returns a list of *Categories*. Optional filter parameters can be passed in. */
        get: operations['getCategories'];
        /**
         * Creates a *Category*.
         *
         * **Required Fields**:
         * - parent_id:
         * 	- To create a child category, set the parent_id to the parent category.
         * 	- To create a top level category, set the parent_id to 0.
         * - name
         *
         * **Read-Only Fields**:
         * - id
         */
        post: operations['createCategory'];
        /**
         * Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
         *
         * **Usage Notes**
         *
         * - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
         * - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` requst to the `/catalog/products/{product_id}` endpoint before deleting a category.
         */
        delete: operations['deleteCategories'];
    };
    '/catalog/categories/{category_id}': {
        /** Returns a single *Category*. Optional parameters can be passed in. */
        get: operations['getCategoryById'];
        /**
         * Updates a *Category*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * - id
         */
        put: operations['updateCategory'];
        /** Deletes a *Category*. */
        delete: operations['deleteCategoryById'];
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
        };
    };
    '/catalog/categories/{category_id}/metafields': {
        /** Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in. */
        get: operations['getCategoryMetafieldsByCategoryId'];
        /**
         * Creates a *Category Metafield*.
         *
         * **Required Fields:**
         * - permission_set
         * - namespace
         * - key
         * - value
         *
         * **Read-Only Fields**
         * - id
         *
         * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        post: operations['createCategoryMetafield'];
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
        };
    };
    '/catalog/categories/{category_id}/metafields/{metafield_id}': {
        /** Returns a single *Category Metafield*. Optional parameters can be passed in. */
        get: operations['getCategoryMetafieldByCategoryId'];
        /**
         * Updates a *Category Metafield*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * * id
         * * These fields can only be modified by the app (API credentials) that created the metafield:
         * 	* namespace
         * 	* key
         * 	* permission_set
         *
         * **Usage Notes**
         * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
         */
        put: operations['updateCategoryMetafield'];
        /** Deletes a *Category Metafield*. */
        delete: operations['deleteCategoryMetafieldById'];
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
        };
    };
    '/catalog/categories/{category_id}/image': {
        /**
         * Create a *Category Image*.
         *
         *  **Required Fields**
         * - image_file: Form posts are the only accepted upload option.
         *
         * Only one image at a time can be created.
         * Limit image size to 1MB.
         * To update a *Category Image*, use the [PUT Categories](/api-reference/catalog/catalog-api/category/updatecategory) and an `image_url`.
         */
        post: operations['createCategoryImage'];
        /** Deletes a *Cateogory Image*. */
        delete: operations['deleteCategoryImage'];
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
        };
    };
    '/catalog/categories/tree': {
        /** Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API. */
        get: operations['getCategoryTree'];
    };
    '/catalog/brands': {
        /** Returns a list of *Brands*. Optional filter parameters can be passed in. */
        get: operations['getBrands'];
        /**
         * Creates a *Brand*.
         *
         * **Required Fields**
         * - name
         *
         * **Read-Only Fields**
         * - id
         */
        post: operations['createBrand'];
        /** By default, it deletes all *Brand* objects. A filter should be added to avoid deleting all *Brand* objects in a store. */
        delete: operations['deleteBrands'];
    };
    '/catalog/brands/{brand_id}': {
        /** Returns a single *Brand*. Optional filter parameters can be passed in. */
        get: operations['getBrandById'];
        /**
         * Updates a *Brand*.
         *
         * **Required Fields**
         * - None
         *
         * **Read-Only Fields**
         * - id
         *
         * To update a *Brand Image*, send a request with an `image_url`.
         */
        put: operations['updateBrand'];
        /** Deletes a *Brand*. */
        delete: operations['deleteBrandById'];
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
        };
    };
    '/catalog/brands/{brand_id}/metafields': {
        /** Returns a list of *Brand Metafields*. Optional filter parameters can be passed in. */
        get: operations['getBrandMetafieldsByBrandId'];
        /**
         * Creates a *Brand Metafield*.
         *
         * **Required Fields**
         * - permission_set
         * - namespace
         * - key
         * - value
         *
         * **Read-Only Fields**
         * - id
         *
         * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        post: operations['createBrandMetafield'];
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
        };
    };
    '/catalog/brands/{brand_id}/metafields/{metafield_id}': {
        /** Returns a *Brand Metafield*. Optional filter parameters can be passed in. */
        get: operations['getBrandMetafieldByBrandId'];
        /**
         * Updates a *Brand Metafield*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * * id
         * * These fields can only be modified by the app (API credentials) that created the metafield:
         * 	* namespace
         * 	* key
         * 	* permission_set
         *
         * **Usage Notes**
         * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
         * * The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        put: operations['updateBrandMetafield'];
        /** Deletes a *Brand Metafield*. */
        delete: operations['deleteBrandMetafieldById'];
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
        };
    };
    '/catalog/brands/{brand_id}/image': {
        /**
         * Creates a *Brand Image*.
         *
         * **Required Fields**
         * - image_file: Form posts are the only accepted upload option.
         *
         * **Read-Only Fields**
         * - id
         *
         * Only one image at a time can be created. To update a *Brand Image*, use the [PUT Brands](/api-reference/catalog/catalog-api/brands/updatebrand) and an `image_url`.
         */
        post: operations['createBrandImage'];
        /** Deletes a *Brand Image*. */
        delete: operations['deleteBrandImage'];
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
        };
    };
    '/catalog/variants': {
        /** Returns a list of all variants in your catalog. Optional parameters can be passed in. */
        get: operations['getVariants'];
        /** Updates a batch of `variant` objects. At the time of writing, the limit is 50 variants. This limit is subject to change. */
        put: operations['updateVariantsBatch'];
    };
    '/catalog/summary': {
        /**
         * Returns a lightweight inventory summary from the BigCommerce Catalog.
         *
         * The inventory summary includes:
         * * "inventory_count"
         * * "variant_count"
         * * "inventory_value"
         * * "highest_variant_price"
         * * "average_variant_price"
         * * "lowest_variant_price"
         * * "oldest_variant_date"
         * * "newest_variant_date"
         * * "primary_category_id"
         * * "primary_category_name"
         */
        get: operations['getCatalogSummary'];
    };
    '/catalog/categories/{category_id}/products/sort-order': {
        /**
         * Returns a list of products and their sort order for a specific category.
         *
         * **Usage Notes**
         * * Data pairs are displayed in ascending order based on products' `sort_order` values.
         * * `null` values are allowed for products without specified `sort_order` values.
         * * Products with `sort_order` value of `null` will be displayed after products with valid numerical values.
         *
         * <div class="HubBlock--callout">
         * <div class="CalloutBlock--info">
         * <div class="HubBlock-content">
         *
         * > ### Note
         * > This endpoint is in beta.
         *
         * </div>
         * </div>
         * </div>
         */
        get: operations['getsortorders'];
        /**
         * Updates *Sort Order* of products within a specific category.
         *
         * <div class="HubBlock--callout">
         * <div class="CalloutBlock--info">
         * <div class="HubBlock-content">
         *
         * > ### Note
         * > This endpoint is in beta.
         *
         * </div>
         * </div>
         * </div>
         */
        put: operations['updatesortorder'];
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
        };
    };
}
interface definitions {
    /** Common Modifier properties. */
    productModifier_Base: {
        /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
        type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
        /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
        required: boolean;
        /** The order the modifiers display on the product detail page. */
        sort_order?: number;
        config?: definitions['config_Full'];
        /** The name of the option shown on the storefront. */
        display_name?: string;
    };
    /** Product Modifier */
    productModifier_Full: definitions['productModifier_Base'] & {
        /** The unique numeric ID of the modifier; increments sequentially. */
        id?: number;
        /** The unique numeric ID of the product to which the option belongs. */
        product_id?: number;
        /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
        name?: string;
        option_values?: definitions['productModifierOptionValue_Full'][];
    };
    /** The model for a POST to create a modifier on a product. */
    productModifier_Post: {
        /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
        type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
        /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
        required: boolean;
        /** The order the modifiers display on the product detail page. */
        sort_order?: number;
        /** The values for option config can vary based on the Modifier created. */
        config?: {
            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /** (date) The type of limit that is allowed to be entered on a date option. */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            date_earliest_value?: string;
            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            date_latest_value?: string;
            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
            file_types_mode?: 'specific' | 'all';
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            file_types_supported?: string[];
            /** (file) A list of other file types allowed with the file upload option. */
            file_types_other?: string[];
            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
            file_max_size?: number;
            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
            text_min_length?: number;
            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
            text_max_length?: number;
            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
            text_lines_limited?: boolean;
            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
            text_max_lines?: number;
            /** (numbers_only_text) Flag to limit the value of a number option. */
            number_limited?: boolean;
            /** (numbers_only_text) The type of limit on values entered for a number option. */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
            number_lowest_value?: number;
            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
        };
        option_values?: (({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: {
                [key: string]: any;
            };
        } & {
            adjusters?: {
                /** Adjuster for Complex Rules. */
                price?: {
                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster_value?: number;
                };
                /** Adjuster for Complex Rules. */
                weight?: {
                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster_value?: number;
                };
                /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                image_url?: string;
                purchasing_disabled?: {
                    /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                    status?: boolean;
                    /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                    message?: string;
                };
            };
        }) & {
            /** The unique numeric ID of the value; increments sequentially. */
            id?: number;
        })[];
    } & {
        /** The name of the option shown on the storefront. */
        display_name: string;
    };
    /** The model for a PUT to update a modifier on a product. */
    productModifier_Put: {
        /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
        type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
        /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
        required: boolean;
        /** The order the modifiers display on the product detail page. */
        sort_order?: number;
        /** The values for option config can vary based on the Modifier created. */
        config?: {
            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /** (date) The type of limit that is allowed to be entered on a date option. */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            date_earliest_value?: string;
            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            date_latest_value?: string;
            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
            file_types_mode?: 'specific' | 'all';
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            file_types_supported?: string[];
            /** (file) A list of other file types allowed with the file upload option. */
            file_types_other?: string[];
            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
            file_max_size?: number;
            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
            text_min_length?: number;
            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
            text_max_length?: number;
            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
            text_lines_limited?: boolean;
            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
            text_max_lines?: number;
            /** (numbers_only_text) Flag to limit the value of a number option. */
            number_limited?: boolean;
            /** (numbers_only_text) The type of limit on values entered for a number option. */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
            number_lowest_value?: number;
            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
        };
        option_values?: (({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: {
                [key: string]: any;
            };
        } & {
            adjusters?: {
                /** Adjuster for Complex Rules. */
                price?: {
                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster_value?: number;
                };
                /** Adjuster for Complex Rules. */
                weight?: {
                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster_value?: number;
                };
                /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                image_url?: string;
                purchasing_disabled?: {
                    /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                    status?: boolean;
                    /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                    message?: string;
                };
            };
        }) & {
            /** The unique numeric ID of the value; increments sequentially. */
            id?: number;
        })[];
    };
    /** Common Product Modifer `option_value` properties. */
    productModifierOptionValue_Base: {
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
        value_data?: {
            [key: string]: any;
        };
        adjusters?: definitions['adjusters_Full'];
    };
    /** Product Modifer `option_value`. */
    productModifierOptionValue_Full: definitions['productModifierOptionValue_Base'] & {
        /** The unique numeric ID of the value; increments sequentially. */
        id?: number;
        option_id?: number;
    };
    /** The model for a POST to create a modifier value on a product. */
    productModifierOptionValue_Post: {
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        value_data?: {
            [key: string]: any;
        };
    } & {
        adjusters?: {
            /** Adjuster for Complex Rules. */
            price?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster_value?: number;
            };
            /** Adjuster for Complex Rules. */
            weight?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster_value?: number;
            };
            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
            image_url?: string;
            purchasing_disabled?: {
                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                status?: boolean;
                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                message?: string;
            };
        };
    };
    /** The model for a PUT to update a modifier value on a product. */
    productModifierOptionValue_Put: ({
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        value_data?: {
            [key: string]: any;
        };
    } & {
        adjusters?: {
            /** Adjuster for Complex Rules. */
            price?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster_value?: number;
            };
            /** Adjuster for Complex Rules. */
            weight?: {
                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster_value?: number;
            };
            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
            image_url?: string;
            purchasing_disabled?: {
                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                status?: boolean;
                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                message?: string;
            };
        };
    }) & {
        /** The unique numeric ID of the value; increments sequentially. */
        id?: number;
    };
    resp_productionOption: {
        data?: definitions['productOption_Full'];
        /** Empty meta object; may be used later. */
        meta?: {
            ''?: string;
        };
    };
    /** Common Option properties. */
    productOption_Base: {
        /** The unique numerical ID of the option, increments sequentially. */
        id?: number;
        /** The unique numerical ID of the product to which the option belongs. */
        product_id?: number;
        /** The name of the option shown on the storefront. */
        display_name?: string;
        /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
        type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
        config?: definitions['productOptionConfig_Full'];
        /** Order in which the option is displayed on the storefront. */
        sort_order?: number;
        option_values?: definitions['productOptionOptionValue_Full'];
    };
    productOption_Full: definitions['productOption_Base'] & {
        /** The unique option name, auto-generated from the display name, a timestamp, and the product ID. */
        name?: string;
    };
    /** The model for a POST to create options on a product. */
    productOption_Post: {
        /** The unique numerical ID of the option, increments sequentially. */
        id?: number;
        /** The unique numerical ID of the product to which the option belongs. */
        product_id?: number;
        /** The name of the option shown on the storefront. */
        display_name?: string;
        /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
        type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
        /** The values for option config can vary based on the Modifier created. */
        config?: {
            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /** (date) The type of limit that is allowed to be entered on a date option. */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            date_earliest_value?: string;
            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            date_latest_value?: string;
            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
            file_types_mode?: 'specific' | 'all';
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            file_types_supported?: string[];
            /** (file) A list of other file types allowed with the file upload option. */
            file_types_other?: string[];
            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
            file_max_size?: number;
            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
            text_min_length?: number;
            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
            text_max_length?: number;
            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
            text_lines_limited?: boolean;
            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
            text_max_lines?: number;
            /** (numbers_only_text) Flag to limit the value of a number option. */
            number_limited?: boolean;
            /** (numbers_only_text) The type of limit on values entered for a number option. */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
            number_lowest_value?: number;
            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
        };
        /** Order in which the option is displayed on the storefront. */
        sort_order?: number;
        option_values?: ({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: {
                [key: string]: any;
            };
        } & {
            /** The unique numeric ID of the value; increments sequentially. */
            id?: number;
        })[];
        /** Publicly available image url */
        image_url?: string;
    };
    /** The model for a PUT to update options on a product. */
    productOption_Put: {
        /** The unique numerical ID of the option, increments sequentially. */
        id?: number;
        /** The unique numerical ID of the product to which the option belongs. */
        product_id?: number;
        /** The name of the option shown on the storefront. */
        display_name?: string;
        /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
        type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
        /** The values for option config can vary based on the Modifier created. */
        config?: {
            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /** (date) The type of limit that is allowed to be entered on a date option. */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            date_earliest_value?: string;
            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
            date_latest_value?: string;
            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
            file_types_mode?: 'specific' | 'all';
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            file_types_supported?: string[];
            /** (file) A list of other file types allowed with the file upload option. */
            file_types_other?: string[];
            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
            file_max_size?: number;
            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
            text_min_length?: number;
            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
            text_max_length?: number;
            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
            text_lines_limited?: boolean;
            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
            text_max_lines?: number;
            /** (numbers_only_text) Flag to limit the value of a number option. */
            number_limited?: boolean;
            /** (numbers_only_text) The type of limit on values entered for a number option. */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
            number_lowest_value?: number;
            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
        };
        /** Order in which the option is displayed on the storefront. */
        sort_order?: number;
        option_values?: ({
            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /** The text display identifying the value on the storefront. Required in a /POST. */
            label: string;
            /** The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: {
                [key: string]: any;
            };
        } & {
            /** The unique numeric ID of the value; increments sequentially. */
            id?: number;
        })[];
        /** Publicly available image url */
        image_url?: string;
    };
    /** Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API. */
    categoriesTree_Resp: {
        data?: definitions['categoriesTreeNode_Full'][];
        meta?: definitions['metaEmpty_Full'];
    };
    /** Used to reflect parent <> child category relationships. Used by Category Tree. */
    categoriesTreeNode_Full: {
        /** The unique numeric ID of the category; increments sequentially. */
        id?: number;
        /** The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog. */
        parent_id?: number;
        /** The name displayed for the category. Name is unique with respect to the category's siblings. */
        name?: string;
        /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
        is_visible?: boolean;
        /** The custom URL for the category on the storefront. */
        url?: string;
        /** The list of children of the category. */
        children?: definitions['categoriesTreeNode_Full'][];
    };
    /** Common Category object properties. */
    category_Full: {
        /**
         * Unique ID of the *Category*. Increments sequentially.
         * Read-Only.
         */
        id?: number;
        /**
         * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
         * Required in a POST if creating a child category.
         */
        parent_id: number;
        /**
         * The name displayed for the category. Name is unique with respect to the category's siblings.
         * Required in a POST.
         */
        name: string;
        /** The product description, which can include HTML formatting. */
        description?: string;
        /** Number of views the category has on the storefront. */
        views?: number;
        /** Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be. */
        sort_order?: number;
        /** Custom title for the category page. If not defined, the category name will be used as the meta title. */
        page_title?: string;
        /** A comma-separated list of keywords that can be used to locate the category when searching the store. */
        search_keywords?: string;
        /** Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
        meta_keywords?: string[];
        /** Custom meta description for the category page. If not defined, the store's default meta description will be used. */
        meta_description?: string;
        /** A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied. */
        layout_file?: string;
        /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
        is_visible?: boolean;
        /** Determines how the products are sorted on category page load. */
        default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
        /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. */
        image_url?: string;
        custom_url?: definitions['customUrl_Full'];
    };
    /** Common Brand properties. */
    brand_Full: {
        /** Unique ID of the *Brand*. Read-Only. */
        id?: number;
        /**
         * The name of the brand. Must be unique.
         * Required in POST.
         */
        name: string;
        /** The title shown in the browser while viewing the brand. */
        page_title?: string;
        /** Comma-separated list of meta keywords to include in the HTML. */
        meta_keywords?: string[];
        /** A meta description to include. */
        meta_description?: string;
        /** A comma-separated list of keywords that can be used to locate this brand. */
        search_keywords?: string;
        /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
        image_url?: string;
        custom_url?: definitions['customUrl_Full'];
    };
    /** Common Variant properties. */
    productVariant_Base: {
        /** The cost price of the variant. Not affected by Price List prices. */
        cost_price?: number;
        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
        price?: number;
        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
        sale_price?: number;
        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
        retail_price?: number;
        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
        weight?: number;
        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
        width?: number;
        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
        height?: number;
        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
        depth?: number;
        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
        is_free_shipping?: boolean;
        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        fixed_cost_shipping_price?: number;
        /** If `true`, this variant will not be purchasable on the storefront. */
        purchasing_disabled?: boolean;
        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
        purchasing_disabled_message?: string;
        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
        upc?: string;
        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
        inventory_level?: number;
        /** When the variant hits this inventory level, it is considered low stock. */
        inventory_warning_level?: number;
        /** Identifies where in a warehouse the variant is located. */
        bin_picking_number?: string;
        /** The Manufacturer Part Number (MPN) for the variant. */
        mpn?: string;
    };
    productVariant_Full: definitions['productVariant_Base'] & {
        id?: number;
        product_id?: number;
        sku?: string;
        /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
        sku_id?: number;
        /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
        option_values?: definitions['productVariantOptionValue_Full'][];
        /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
        calculated_price?: number;
        calculated_weight?: number;
    };
    /** The model for a POST to create variants on a product. */
    productVariant_Post: {
        /** The cost price of the variant. Not affected by Price List prices. */
        cost_price?: number;
        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
        price?: number;
        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
        sale_price?: number;
        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
        retail_price?: number;
        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
        weight?: number;
        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
        width?: number;
        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
        height?: number;
        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
        depth?: number;
        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
        is_free_shipping?: boolean;
        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        fixed_cost_shipping_price?: number;
        /** If `true`, this variant will not be purchasable on the storefront. */
        purchasing_disabled?: boolean;
        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
        purchasing_disabled_message?: string;
        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
        upc?: string;
        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
        inventory_level?: number;
        /** When the variant hits this inventory level, it is considered low stock. */
        inventory_warning_level?: number;
        /** Identifies where in a warehouse the variant is located. */
        bin_picking_number?: string;
        /** Publicly available image url */
        image_url?: string;
    } & {
        product_id?: number;
        sku?: string;
        /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
        option_values?: definitions['productVariantOptionValue_Full'][];
    };
    variantCollection_Put: definitions['productVariant_Full'][];
    /** The model for a PUT to update variants on a product. */
    variant_Put: {
        /** The cost price of the variant. Not affected by Price List prices. */
        cost_price?: number;
        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
        price?: number;
        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
        sale_price?: number;
        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
        retail_price?: number;
        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
        weight?: number;
        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
        width?: number;
        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
        height?: number;
        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
        depth?: number;
        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
        is_free_shipping?: boolean;
        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        fixed_cost_shipping_price?: number;
        /** If `true`, this variant will not be purchasable on the storefront. */
        purchasing_disabled?: boolean;
        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
        purchasing_disabled_message?: string;
        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
        upc?: string;
        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
        inventory_level?: number;
        /** When the variant hits this inventory level, it is considered low stock. */
        inventory_warning_level?: number;
        /** Identifies where in a warehouse the variant is located. */
        bin_picking_number?: string;
    } & {
        id?: number;
    };
    /** The model for a POST to create variants on a product. */
    productVariant_Post_Product: definitions['productVariant_Base'] & {
        sku?: string;
        option_values?: {
            /** The name of the option. */
            option_display_name?: string;
            /** The label of the option value. */
            label?: string;
        }[];
    };
    /** The model for a PUT to update variants on a product. */
    productVariant_Put_Product: {
        /** The cost price of the variant. Not affected by Price List prices. */
        cost_price?: number;
        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
        price?: number;
        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
        sale_price?: number;
        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
        retail_price?: number;
        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
        weight?: number;
        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
        width?: number;
        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
        height?: number;
        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
        depth?: number;
        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
        is_free_shipping?: boolean;
        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        fixed_cost_shipping_price?: number;
        /** If `true`, this variant will not be purchasable on the storefront. */
        purchasing_disabled?: boolean;
        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
        purchasing_disabled_message?: string;
        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
        upc?: string;
        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
        inventory_level?: number;
        /** When the variant hits this inventory level, it is considered low stock. */
        inventory_warning_level?: number;
        /** Identifies where in a warehouse the variant is located. */
        bin_picking_number?: string;
        product_id?: number;
        sku?: string;
    };
    productVariantOptionValue_Full: {
        /** The name of the option. */
        option_display_name?: string;
        /** The label of the option value. */
        label?: string;
    } & definitions['productVariantOptionValue_Base'];
    /** The model for a POST to create option values on a product. */
    productOptionValue_Post_Product: {
        /** The name of the option. */
        option_display_name?: string;
        /** The label of the option value. */
        label?: string;
    };
    /** Common Product Variant Option properties. */
    productVariantOptionValue_Base: {
        /** `option_value` ID. */
        id?: number;
        /** `option` ID. */
        option_id?: number;
    };
    /** The model for a POST to create option values on a variant. */
    productVariantOptionValue_Post: {
        id?: number;
        option_id?: number;
    };
    resp_productOptionValue: {
        data?: definitions['productOptionOptionValue_Full'];
        /** Empty meta object; may be used later. */
        meta?: {
            ''?: string;
        };
    };
    /** Common Product Option `option_value` properties. */
    productOptionOptionValue_Base: {
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
        value_data?: {
            [key: string]: any;
        };
    };
    /** Product Option `option_value`. */
    productOptionOptionValue_Full: definitions['productOptionOptionValue_Base'] & {
        /** The unique numeric ID of the value; increments sequentially. */
        id?: number;
    };
    /** The model for a POST to create option values on a product. */
    productOptionValue_Post: {
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        value_data?: {
            [key: string]: any;
        };
    };
    /** The model for a PUT to update option values on a product. */
    productOptionValue_Put: {
        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /** The text display identifying the value on the storefront. Required in a /POST. */
        label: string;
        /** The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        value_data?: {
            [key: string]: any;
        };
    } & {
        /** The unique numeric ID of the value; increments sequentially. */
        id?: number;
    };
    /** Common ProductImage properties. */
    productImage_Base: {
        /** The local path to the original image file uploaded to BigCommerce. */
        image_file?: string;
        /** Flag for identifying whether the image is used as the product's thumbnail. */
        is_thumbnail?: boolean;
        /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
        sort_order?: number;
        /** The description for the image. */
        description?: string;
        /** Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
        image_url?: string;
    };
    /** The model for a POST to create an image on a product. */
    productImage_Post: {
        /** The unique numeric ID of the image; increments sequentially. */
        id?: number;
        /** The unique numeric identifier for the product with which the image is associated. */
        product_id?: number;
        /** The local path to the original image file uploaded to BigCommerce. */
        image_file?: string;
        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
        url_zoom?: string;
        /** The standard URL for this image. By default, this is used for product-page images. */
        url_standard?: string;
        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
        url_thumbnail?: string;
        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
        url_tiny?: string;
        /** The date on which the product image was modified. */
        date_modified?: string;
        /** Flag for identifying whether the image is used as the product's thumbnail. */
        is_thumbnail?: boolean;
        /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
        sort_order?: number;
        /** The description for the image. */
        description?: string;
    } & {
        /** Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
        image_url?: string;
        /** Must be sent as a multipart/form-data field in the request body. */
        image_file?: string;
    };
    /** The model for a PUT to update applicable Product Image fields. */
    productImage_Put: {
        /** The unique numeric ID of the image; increments sequentially. */
        id?: number;
        /** The unique numeric identifier for the product with which the image is associated. */
        product_id?: number;
        /** The local path to the original image file uploaded to BigCommerce. */
        image_file?: string;
        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
        url_zoom?: string;
        /** The standard URL for this image. By default, this is used for product-page images. */
        url_standard?: string;
        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
        url_thumbnail?: string;
        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
        url_tiny?: string;
        /** The date on which the product image was modified. */
        date_modified?: string;
        /** Flag for identifying whether the image is used as the product's thumbnail. */
        is_thumbnail?: boolean;
        /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
        sort_order?: number;
        /** The description for the image. */
        description?: string;
    };
    /** The model for a POST to create a video on a product. */
    productVideo_Base: {
        /** The title for the video. If left blank, this will be filled in according to data on a host site. */
        title?: string;
        /** The description for the video. If left blank, this will be filled in according to data on a host site. */
        description?: string;
        /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
        sort_order?: number;
        /** The video type (a short name of a host site). */
        type?: 'youtube';
        /** The ID of the video on a host site. */
        video_id?: string;
    };
    /** A product video model. */
    productVideo_Full: definitions['productVideo_Base'] & {
        /** The unique numeric ID of the product video; increments sequentially. */
        id?: number;
        /** The unique numeric identifier for the product with which the image is associated. */
        product_id?: number;
        /** Length of the video. This will be filled in according to data on a host site. */
        length?: string;
    };
    /** The model for a POST to create a video on a product. */
    productVideo_Post: definitions['productVideo_Base'];
    /** The model for a PUT to update a video on a product. */
    productVideo_Put: definitions['productVideo_Base'] & {
        /** The unique numeric ID of the product video; increments sequentially. */
        id?: number;
    };
    productReview_Base: {
        /**
         * The title for the product review.
         * Required in /POST.
         */
        title: string;
        /** The text for the product review. */
        text?: string;
        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
        status?: string;
        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
        rating?: number;
        /** The email of the reviewer. Must be a valid email, or an empty string. */
        email?: string;
        /** The name of the reviewer. */
        name?: string;
        /** Date the product was reviewed. Required in /POST. */
        date_reviewed: string;
    };
    /** A product review model. */
    productReview_Full: definitions['productReview_Base'] & {
        /** The unique numeric ID of the product review; increments sequentially. */
        id?: number;
        /** The unique numeric identifier for the product with which the review is associated. */
        product_id?: number;
        /** Date the product review was created. */
        date_created?: string;
        /** Date the product review was modified. */
        date_modified?: string;
    };
    /** The model for a POST to create a product review. */
    productReview_Post: {
        /**
         * The title for the product review.
         * Required in /POST.
         */
        title: string;
        /** The text for the product review. */
        text?: string;
        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
        status?: string;
        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
        rating?: number;
        /** The email of the reviewer. Must be a valid email, or an empty string. */
        email?: string;
        /** The name of the reviewer. */
        name?: string;
        /** Date the product was reviewed. Required in /POST. */
        date_reviewed: string;
    };
    /** The model for a PUT to update a product review. */
    productReview_Put: {
        /**
         * The title for the product review.
         * Required in /POST.
         */
        title: string;
        /** The text for the product review. */
        text?: string;
        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
        status?: string;
        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
        rating?: number;
        /** The email of the reviewer. Must be a valid email, or an empty string. */
        email?: string;
        /** The name of the reviewer. */
        name?: string;
        /** Date the product was reviewed. Required in /POST. */
        date_reviewed: string;
    };
    /**
     * Image Response returns for:
     * * Create Variant Image
     * * Create Modifier Image
     * * Create Category Image
     * * Create Brand Image
     */
    resp_productImage: {
        data?: definitions['productImage_Full'];
        /** Empty meta object; may be used later. */
        meta?: {
            [key: string]: any;
        };
    };
    /** An object containing a publicly accessible image URL, or a form post that contains an image file. */
    resourceImage_Full: {
        /** A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
        image_url?: string;
    };
    /** The model for a POST to create a product. */
    product_Post: definitions['product_Base'] & {
        variants?: definitions['productVariant_Post_Product'];
    };
    /** The model for a PUT to update a product. */
    product_Put: {
        /** The unique numerical ID of the product; increments sequentially. */
        id?: number;
    } & definitions['product_Base'] & {
        variants?: definitions['productVariant_Put_Product'];
    };
    /** Catalog Summary object describes a lightweight summary of the catalog. */
    catalogSummary_Full: {
        /** A count of all inventory items in the catalog. */
        inventory_count?: number;
        /** Total value of store's inventory. */
        inventory_value?: number;
        /** ID of the category containing the most products. */
        primary_category_id?: number;
        /** Name of the category containing the most products. */
        primary_category_name?: string;
        /** Total number of variants */
        variant_count?: number;
        /** Highest priced variant */
        highest_variant_price?: number;
        /** Average price of all variants */
        average_variant_price?: number;
        /** Lowest priced variant in the store */
        lowest_variant_price?: string;
        oldest_variant_date?: string;
        newest_variant_date?: string;
    };
    /** Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center. */
    metafield_Base: {
        /** Unique ID of the *Metafield*. Read-Only. */
        id?: number;
        /**
         * Determines the visibility and writeability of the field by other API consumers.
         *
         * |Value|Description
         * |-|-|
         * |`app_only`|Private to the app that owns the field|
         * |`read`|Visible to other API consumers|
         * |`write`|Open for reading and writing by other API consumers|
         * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
         * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
         */
        permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
        /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
        namespace: string;
        /** The name of the field, for example: `location_id`, `color`. Required for POST. */
        key: string;
        /** The value of the field, for example: `1`, `blue`. Required for POST. */
        value: string;
        /** Description for the metafields. */
        description?: string;
        /** The type of resource with which the metafield is associated. */
        resource_type?: 'category' | 'brand' | 'product' | 'variant';
        /** The ID for the resource with which the metafield is associated. */
        resource_id?: number;
        /** Date and time of the metafield's creation. Read-Only. */
        date_created?: string;
        /** Date and time when the metafield was last updated. Read-Only. */
        date_modified?: string;
    };
    /** Common ComplexRule properties. */
    complexRule_Base: {
        /**
         * The unique numeric ID of the rule; increments sequentially.
         * Read-Only
         */
        id?: number;
        /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
        product_id?: number;
        /** The priority to give this rule when making adjustments to the product properties. */
        sort_order?: number;
        /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
        enabled?: boolean;
        /** Flag for determining whether other rules should not be applied after this rule has been applied. */
        stop?: boolean;
        /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
        purchasing_disabled?: boolean;
        /** Message displayed on the storefront when a rule disables the purchasing of a product. */
        purchasing_disabled_message?: string;
        /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
        purchasing_hidden?: boolean;
        /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
        image_url?: string;
        price_adjuster?: definitions['adjuster_Full'];
        weight_adjuster?: definitions['adjuster_Full'];
        conditions?: definitions['complexRuleConditionBase'][];
    };
    /** Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date. */
    productCustomField_Base: {
        /**
         * The unique numeric ID of the custom field; increments sequentially.
         * Read-Only
         */
        id?: number;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        name: string;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        value: string;
    };
    /** The model for a POST to create a custom field on a product. */
    productCustomField_Post: {
        /**
         * The unique numeric ID of the custom field; increments sequentially.
         * Read-Only
         */
        id?: number;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        name: string;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        value: string;
    };
    /** The model for a PUT to update a custom field on a product. */
    productCustomField_Put: {
        /**
         * The unique numeric ID of the custom field; increments sequentially. Required to update existing custom field in /PUT request.
         * Read-Only
         */
        id?: number;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        name: string;
        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
        value: string;
    };
    /** Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`'s, or else reference a `modifier_value_id` and a `variant_id`. */
    complexRuleConditionBase: {
        /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
        id?: number;
        /**
         * The unique numeric ID of the rule with which the condition is associated.
         * Read-Only
         */
        rule_id?: number;
        /**
         * The unique numeric ID of the modifier with which the rule condition is associated.
         * Required in /POST.
         */
        modifier_id: number;
        /**
         * The unique numeric ID of the modifier value with which the rule condition is associated.
         * Required in /POST.
         */
        modifier_value_id: number;
        /**
         * The unique numeric ID of the variant with which the rule condition is associated.
         * Required in /POST.
         */
        variant_id: number;
        /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
        combination_id?: number;
    };
    /** The custom URL for the product on the storefront. */
    customUrl_Full: {
        /** Product URL on the storefront. */
        url?: string;
        /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
        is_customized?: boolean;
    };
    /** Common Bulk Pricing Rule properties */
    bulkPricingRule_Full: {
        /** Unique ID of the *Bulk Pricing Rule*. Read-Only. */
        id?: number;
        /**
         * The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
         * Required in /POST.
         */
        quantity_min: number;
        /**
         * The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
         * Required in /POST.
         */
        quantity_max: number;
        /**
         * The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
         * Required in /POST.
         */
        type: 'price' | 'percent' | 'fixed';
        /**
         * The discount can be a fixed dollar amount or a percentage. For a fixed dollar amount enter it as an integer and the response will return as an integer. For percentage enter the amount as the percentage divided by 100 using string format. For example 10% percent would be “.10”. The response will return as an integer.
         * Required in /POST.
         */
        amount: number;
    };
    /** The values for option config can vary based on the Modifier created. */
    productOptionConfig_Full: {
        /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
        default_value?: string;
        /** (checkbox) Flag for setting the checkbox to be checked by default. */
        checked_by_default?: boolean;
        /** (checkbox) Label displayed for the checkbox option. */
        checkbox_label?: string;
        /** (date) Flag to limit the dates allowed to be entered on a date option. */
        date_limited?: boolean;
        /** (date) The type of limit that is allowed to be entered on a date option. */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
        date_earliest_value?: string;
        /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
        date_latest_value?: string;
        /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
        file_types_mode?: 'specific' | 'all';
        /**
         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         *   `other` - Allows file types defined in the `file_types_other` array.
         */
        file_types_supported?: string[];
        /** (file) A list of other file types allowed with the file upload option. */
        file_types_other?: string[];
        /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
        file_max_size?: number;
        /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
        text_characters_limited?: boolean;
        /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
        text_min_length?: number;
        /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
        text_max_length?: number;
        /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
        text_lines_limited?: boolean;
        /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
        text_max_lines?: number;
        /** (numbers_only_text) Flag to limit the value of a number option. */
        number_limited?: boolean;
        /** (numbers_only_text) The type of limit on values entered for a number option. */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
        number_lowest_value?: number;
        /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
        number_highest_value?: number;
        /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
        number_integers_only?: boolean;
        /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
        product_list_adjusts_inventory?: boolean;
        /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
        product_list_adjusts_pricing?: boolean;
        /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    /** Adjuster for Complex Rules. */
    adjuster_Full: {
        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        adjuster?: 'relative' | 'percentage';
        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
        adjuster_value?: number;
    };
    /** Errors during batch usage for the BigCommerce API. */
    resp_variantBatchError: {
        batch_errors?: (definitions['error_Base'] & {
            errors?: {
                additionalProperties?: string;
            };
        })[];
    };
    /** Data about the response, including pagination and collection totals. */
    metaCollection_Full: {
        pagination?: definitions['pagination_Full'];
    };
    /** Data about the response, including pagination and collection totals. */
    pagination_Full: {
        /** Total number of items in the result set. */
        total?: number;
        /** Total number of items in the collection response. */
        count?: number;
        /** The amount of items returned in the collection per page, controlled by the limit parameter. */
        per_page?: number;
        /** The page you are currently on within the collection. */
        current_page?: number;
        /** The total number of pages in the collection. */
        total_pages?: number;
        /** Pagination links for the previous and next parts of the whole collection. */
        links?: {
            /** Link to the previous page returned in the response. */
            previous?: string;
            /** Link to the current page returned in the response. */
            current?: string;
            /** Link to the next page returned in the response. */
            next?: string;
        };
    };
    /** Empty meta object; may be used later. */
    metaEmpty_Full: {
        [key: string]: any;
    };
    errorResponse_Full: definitions['error_Base'] & {
        errors?: definitions['detailedErrors'];
    };
    /** Error payload for the BigCommerce API. */
    error_Base: {
        /** The HTTP status code. */
        status?: number;
        /** The error title describing the particular error. */
        title?: string;
        type?: string;
        instance?: string;
    };
    /** Error payload for the BigCommerce API. */
    errorNotFound: {
        /** 404 HTTP status code. */
        status?: number;
        /** The error title describing the particular error. */
        title?: string;
        type?: string;
        instance?: string;
    };
    /** A gift-certificate model. */
    giftCertificate_Full: {
        /** The gift-certificate code. */
        code?: string;
        /** The balance on a gift certificate when it was purchased. */
        original_balance?: number;
        /** The balance on a gift certificate at the time of this purchase. */
        starting_balance?: number;
        /** The remaining balance on a gift certificate. */
        remaining_balance?: number;
        /** The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired. */
        status?: 'active' | 'pending' | 'disabled' | 'expired';
    };
    /** No-content response for the BigCommerce API. */
    errorNoContent: {
        /** 204 HTTP status code. */
        status?: number;
        /** The error title describing the situation. */
        title?: string;
        type?: string;
        instance?: string;
    };
    detailedErrors: {
        additionalProperties?: string;
    };
    product_Full: definitions['product_Base'] & {
        /** The date on which the product was created. */
        date_created?: string;
        /** The date on which the product was modified. */
        date_modified?: string;
        /** ID of the product. Read Only. */
        id?: number;
        /** The unique identifier of the base variant associated with a simple product. This value is `null` for complex products. */
        base_variant_id?: number;
        /** The price of the product as seen on the storefront. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. */
        calculated_price?: number;
        options?: definitions['productOption_Base'][];
        modifiers?: definitions['productModifier_Full'][];
        /** Minimum Advertised Price. */
        map_price?: number;
        /** Indicates that the product is in an Option Set (legacy V2 concept). */
        option_set_id?: number;
        /** Legacy template setting which controls if the option set shows up to the side of or below the product image and description. */
        option_set_display?: string;
    } & {
        variants?: definitions['productVariant_Full'][];
    };
    /** Common ProductImage properties. */
    productImage_Full: definitions['productImage_Base'] & {
        /** The unique numeric ID of the image; increments sequentially. */
        id?: number;
        /** The unique numeric identifier for the product with which the image is associated. */
        product_id?: number;
        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
        url_zoom?: string;
        /** The standard URL for this image. By default, this is used for product-page images. */
        url_standard?: string;
        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
        url_thumbnail?: string;
        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
        url_tiny?: string;
        /** The date on which the product image was modified. */
        date_modified?: string;
    };
    metafield_Post: definitions['metafield_Base'];
    /** The model for batch updating products. */
    product_Put_Collection: ({
        /** The unique numerical ID of the product; increments sequentially. Required on batch product `PUT` requests. */
        id: number;
    } & definitions['product_Base'])[];
    /** The values for option config can vary based on the Modifier created. */
    config_Full: {
        /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
        default_value?: string;
        /** (checkbox) Flag for setting the checkbox to be checked by default. */
        checked_by_default?: boolean;
        /** (checkbox) Label displayed for the checkbox option. */
        checkbox_label?: string;
        /** (date) Flag to limit the dates allowed to be entered on a date option. */
        date_limited?: boolean;
        /** (date) The type of limit that is allowed to be entered on a date option. */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
        date_earliest_value?: string;
        /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
        date_latest_value?: string;
        /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
        file_types_mode?: 'specific' | 'all';
        /**
         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         *   `other` - Allows file types defined in the `file_types_other` array.
         */
        file_types_supported?: string[];
        /** (file) A list of other file types allowed with the file upload option. */
        file_types_other?: string[];
        /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
        file_max_size?: number;
        /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
        text_characters_limited?: boolean;
        /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
        text_min_length?: number;
        /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
        text_max_length?: number;
        /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
        text_lines_limited?: boolean;
        /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
        text_max_lines?: number;
        /** (numbers_only_text) Flag to limit the value of a number option. */
        number_limited?: boolean;
        /** (numbers_only_text) The type of limit on values entered for a number option. */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
        number_lowest_value?: number;
        /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
        number_highest_value?: number;
        /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
        number_integers_only?: boolean;
        /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
        product_list_adjusts_inventory?: boolean;
        /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
        product_list_adjusts_pricing?: boolean;
        /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    adjusters_Full: {
        price?: definitions['adjuster_Full'];
        weight?: definitions['adjuster_Full'];
        /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
        image_url?: string;
        purchasing_disabled?: {
            /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
            status?: boolean;
            /** The message displayed on the storefront when the purchasing disabled status is `true`. */
            message?: string;
        };
    };
    /**
     * Variant properties used on:
     * * `/catalog/products/variants`
     * * `/catalog/variants`
     */
    variant_Base: {
        /** The cost price of the variant. Not affected by Price List prices. */
        cost_price?: number;
        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
        price?: number;
        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
        sale_price?: number;
        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
        retail_price?: number;
        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
        weight?: number;
        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
        width?: number;
        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
        height?: number;
        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
        depth?: number;
        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
        is_free_shipping?: boolean;
        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        fixed_cost_shipping_price?: number;
        /** If `true`, this variant will not be purchasable on the storefront. */
        purchasing_disabled?: boolean;
        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
        purchasing_disabled_message?: string;
        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
        upc?: string;
        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
        inventory_level?: number;
        /** When the variant hits this inventory level, it is considered low stock. */
        inventory_warning_level?: number;
        /** Identifies where in a warehouse the variant is located. */
        bin_picking_number?: string;
    };
    /**
     * Shared `Product` properties used in:
     * * `POST`
     * * `PUT`
     * * `GET`
     */
    product_Base: {
        /** The product name. */
        name: string;
        /** The product type. One of: `physical` - a physical stock unit, `digital` - a digital download. */
        type: 'physical' | 'digital';
        /** User defined product code/stock keeping unit (SKU). */
        sku?: string;
        /** The product description, which can include HTML formatting. */
        description?: string;
        /** Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store */
        weight: number;
        /** Width of the product, which can be used when calculating shipping costs. */
        width?: number;
        /** Depth of the product, which can be used when calculating shipping costs. */
        depth?: number;
        /** Height of the product, which can be used when calculating shipping costs. */
        height?: number;
        /** The price of the product. The price should include or exclude tax, based on the store settings. */
        price: number;
        /** The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store. */
        cost_price?: number;
        /** The retail cost of the product. If entered, the retail cost price will be shown on the product page. */
        retail_price?: number;
        /** If entered, the sale price will be used instead of value in the price field when calculating the product's cost. */
        sale_price?: number;
        /** Minimum Advertised Price */
        map_price?: number;
        /** The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.) */
        tax_class_id?: number;
        /** Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation. */
        product_tax_code?: string;
        /** An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values. */
        categories?: number[];
        /** A product can be added to an existing brand during a product /PUT or /POST. */
        brand_id?: number;
        /** Current inventory level of the product. Simple inventory tracking must be enabled (See the `inventory_tracking` field) for this to take any effect. */
        inventory_level?: number;
        /** Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect. */
        inventory_warning_level?: number;
        /** The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels. */
        inventory_tracking?: 'none' | 'product' | 'variant';
        /** A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
        fixed_cost_shipping_price?: number;
        /** Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero. */
        is_free_shipping?: boolean;
        /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view. */
        is_visible?: boolean;
        /** Flag to determine whether the product should be included in the `featured products` panel when viewing the store. */
        is_featured?: boolean;
        /** An array of IDs for the related products. */
        related_products?: number[];
        /** Warranty information displayed on the product page. Can include HTML formatting. */
        warranty?: string;
        /** The BIN picking number for the product. */
        bin_picking_number?: string;
        /** The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. */
        layout_file?: string;
        /** The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations. */
        upc?: string;
        /** A comma-separated list of keywords that can be used to locate the product when searching the store. */
        search_keywords?: string;
        /** Availability of the product. Availability options are: `available` - the product can be purchased on the storefront; `disabled` - the product is listed in the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders. */
        availability?: 'available' | 'disabled' | 'preorder';
        /** Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.' */
        availability_description?: string;
        /** Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field. */
        gift_wrapping_options_type?: 'any' | 'none' | 'list';
        /** A list of gift-wrapping option IDs. */
        gift_wrapping_options_list?: number[];
        /** Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results. */
        sort_order?: number;
        /** The product condition. Will be shown on the product page if the `is_condition_shown` field's value is `true`. Possible values: `New`, `Used`, `Refurbished`. */
        condition?: 'New' | 'Used' | 'Refurbished';
        /** Flag used to determine whether the product condition is shown to the customer on the product page. */
        is_condition_shown?: boolean;
        /** The minimum quantity an order must contain, to be eligible to purchase this product. */
        order_quantity_minimum?: number;
        /** The maximum quantity an order can contain when purchasing the product. */
        order_quantity_maximum?: number;
        /** Custom title for the product page. If not defined, the product name will be used as the meta title. */
        page_title?: string;
        /** Custom meta keywords for the product page. If not defined, the store's default keywords will be used. */
        meta_keywords?: string[];
        /** Custom meta description for the product page. If not defined, the store's default meta description will be used. */
        meta_description?: string;
        /** The number of times the product has been viewed. */
        view_count?: number;
        /** Pre-order release date. See the `availability` field for details on setting a product's availability to accept pre-orders. */
        preorder_release_date?: string;
        /** Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date. */
        preorder_message?: string;
        /**
         * If set to true then on the preorder release date the preorder status will automatically be removed.
         * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
         * control panel or using the API. Using the API set `availability` to `available`.
         */
        is_preorder_only?: boolean;
        /** False by default, indicating that this product's price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.) */
        is_price_hidden?: boolean;
        /** By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.) */
        price_hidden_label?: string;
        custom_url?: definitions['customUrl_Full'];
        /** Type of product, defaults to `product`. */
        open_graph_type?: 'product' | 'album' | 'book' | 'drink' | 'food' | 'game' | 'movie' | 'song' | 'tv_show';
        /** Title of the product, if not specified the product name will be used instead. */
        open_graph_title?: string;
        /** Description to use for the product, if not specified then the meta_description will be used instead. */
        open_graph_description?: string;
        /** Flag to determine if product description or open graph description is used. */
        open_graph_use_meta_description?: boolean;
        /** Flag to determine if product name or open graph name is used. */
        open_graph_use_product_name?: boolean;
        /** Flag to determine if product image or open graph image is used. */
        open_graph_use_image?: boolean;
        /** The brand can be created during a product PUT or POST request. If the brand already exists then the product will be added. If not the brand will be created and the product added. If using `brand_name` it performs a fuzzy match and adds the brand. eg. "Common Good" and "Common good" are the same. Brand name does not return as part of a product response. Only the `brand_id`. */
        'brand_name or brand_id'?: string;
        /** Global Trade Item Number */
        gtin?: string;
        /** Manufacturer Part Number */
        mpn?: string;
        /** The total rating for the product. */
        reviews_rating_sum?: number;
        /** The number of times the product has been rated. */
        reviews_count?: number;
        /** The total quantity of this product sold. */
        total_sold?: number;
        custom_fields?: definitions['productCustomField_Put'][];
        bulk_pricing_rules?: definitions['bulkPricingRule_Full'][];
        images?: definitions['productImage_Full'][];
        videos?: definitions['productVideo_Full'][];
    };
    /** Properties for updating metafields. */
    metafield_Put: {
        /** Unique ID of the *Metafield*. Read-Only. */
        id?: number;
    } & definitions['metafield_Base'];
    metafield_Full: definitions['metafield_Put'] & {
        /** Date and time of the metafield's creation. Read-Only. */
        date_created?: string;
        /** Date and time when the metafield was last updated. Read-Only. */
        date_modified?: string;
    };
    /** The model for a PUT to update variants on a product. */
    productVariant_Put: definitions['productVariant_Base'] & {
        product_id?: number;
        sku?: string;
    };
    errorResponse_409: {
        code?: number;
        status?: number;
        /** The error title describing the particular error. */
        title?: string;
        type?: string;
    } & {
        errors?: definitions['detailedErrors'];
    };
    errorResponse_422: {
        code?: number;
        status?: number;
        /** The error title describing the particular error. */
        title?: string;
        type?: string;
    } & {
        errors?: definitions['detailedErrors'];
    };
    /** The relative priority of the product among other products inside the category. */
    productSortOrder: {
        /** The ID of the associated product. */
        product_id: number;
        sort_order: number;
    };
}
interface parameters {
    /** The template file, for example: `pages/home`. */
    FilterTemplateFileParam: string;
    /** Filter items by id. */
    FilterIdParam: number;
    /** Filter items by sku. */
    FilterSkuParam: string;
    /** Filter items by name. */
    FilterNameParam: string;
    /** Filter items by email. */
    FilterEmailParam: string;
    /** Filter items by source. */
    FilterSourceParam: string;
    /** Filter items by order_id. */
    FilterOrderIdParam: number;
    /** Filter items by upc. */
    FilterUpcParam: string;
    /** Filter items by price. */
    FilterPriceParam: number;
    /** Filter items by sale_price. */
    FilterSalePriceParam: number;
    /** Filter items by retail_price. */
    FilterRetailPriceParam: number;
    /** Filter items by map_price. */
    FilterMapPriceParam: number;
    /** Filter items by calculated_price. */
    FilterCalculatedPriceParam: number;
    /** Filter items by weight. */
    FilterWeightParam: number;
    /** Filter items by condition. */
    FilterConditionParam: 'new' | 'used' | 'refurbished';
    /** Filter items by brand_id. */
    FilterBrandIdParam: number;
    /** Filter items by date_modified. For example `v3/catalog/products?date_modified:min=2018-06-15` */
    FilterDateModifiedParam: string;
    /** Filter items by date_created. */
    FilterDateCreatedParam: string;
    /** Filter items by date_last_imported. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
    FilterDateLastImportedParam: string;
    /** Filter items by if visible on the storefront. */
    FilterIsVisibleParam: boolean;
    /** Filter items by is_featured. */
    FilterIsFeaturedParam: number;
    /** Filter items by is_free_shipping. */
    FilterIsFreeShippingParam: number;
    /** Filter items by inventory_level. */
    FilterInventoryLevelParam: number;
    /** Filter items by inventory_low. Values: 1, 0. */
    FilterInventoryLowParam: number;
    /** Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
    FilterOutOfStockParam: number;
    /** Filter items by total_sold. */
    FilterTotalSoldParam: number;
    /** Filter items by type: `physical` or `digital`. */
    ProductFilterTypeParam: 'digital' | 'physical';
    /**
     * Filter items by categories.
     *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
     */
    FilterCategoriesParam: number;
    /** Filter items by keywords. eg. new, towel, bath */
    FilterKeywordParam: string;
    /** Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
    ProductFilterKeywordParam: string;
    /** Set context for a product search. */
    ProductFilterKeywordContextParam: 'shopper' | 'merchant';
    /** Filter items by status. */
    FilterStatusParam: number;
    /** Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
    FilterIncludeParam: 'variants' | 'images' | 'custom_fields' | 'bulk_pricing_rules' | 'primary_image' | 'modifiers' | 'options' | 'videos';
    /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    FilterIncludeFieldsParam: string;
    /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
    FilterExcludeFieldsParam: string;
    /** Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
    FilterParentIdParam: number;
    /** Filter items by page_title. */
    FilterPageTitleParam: string;
    /** Filter items by availability. Values are: available, disabled, preorder. */
    FilterAvailabilityParam: 'available' | 'disabled' | 'preorder';
    /** A comma-separated list of ids of `Product`s whose prices were requested. */
    FilterProductIdParam: string;
    /** The ID of the `Variant` whose prices were requested. */
    FilterVariantIdParam: number;
    /** Filter items by currency. */
    FilterCurrencyParam: string;
    /** Specifies the page number in a limited (paginated) list of products. */
    PageParam: number;
    /** Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam: number;
    /** Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam: 'asc' | 'desc';
    /** Field name to sort by. */
    ProductSortParam: 'id' | 'name' | 'sku' | 'price' | 'date_modified' | 'date_last_imported' | 'inventory_level' | 'is_visible' | 'total_sold';
    /** The ID of the `Product` to which the resource belongs. */
    ProductIdParam: number;
    /** The ID of the `review` that is being operated on. */
    ReviewIdParam: number;
    /** The ID of the `Image` that is being operated on. */
    ImageIdParam: number;
    /** The BigCommerce ID of the `Video` */
    VideoIdParam: number;
    /** The ID of the `ComplexRule`. */
    ComplexRuleIdParam: number;
    /** The ID of the `ConfigurableField`. */
    ConfigurableFieldIdParam: number;
    /** The ID of the `CustomField`. */
    CustomFieldIdParam: number;
    /** The ID of the `BulkPricingRule`. */
    BulkPricingRuleIdParam: number;
    /** The ID of the `Modifier`. */
    ModifierIdParam: number;
    /** The ID of the `Modifier/Option Value`. */
    ValueIdParam: number;
    /** The ID of the `Option`. */
    OptionIdParam: number;
    /** ID of the variant on a product, or on an associated Price List Record. */
    VariantIdParam: number;
    /** The ID of the `Category` to which the resource belongs. */
    CategoryIdParam: number;
    /** The ID of the `Brand` to which the resource belongs. */
    BrandIdParam: number;
    /** The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** Filter based on a metafield's key. */
    MetafieldKeyParam: string;
    /** Filter based on a metafield's namespace. */
    MetafieldNamespaceParam: string;
    /** An image file. Supported MIME types include GIF, JPEG, and PNG. */
    ImageFileParam: {
        [key: string]: any;
    };
    /** The ID of the `Order` to which the transactions belong. */
    OrderIdParam: number;
    Accept: string;
    'Content-Type': string;
    /**
     * A comma-separated list of ids of Products whose prices were requested. For example:
     * `?product_id=:id`
     * `?product_id:in=77,80,81`
     */
    product_id: string;
    FilterIdIn: number[];
    FilterIdNotIn: number[];
    FilterIdMax: number[];
    FilterIdMin: number[];
    FilterIdGreater: number[];
    FilterIdLess: number[];
}
interface responses {
    ProductCollectionResponse: {
        schema: {
            data?: definitions['product_Full'][];
            meta?: definitions['metaCollection_Full'];
        };
    };
    BrandResponse: {
        schema: {
            /** Common Brand properties. */
            data?: {
                /** Unique ID of the *Brand*. Read-Only. */
                id?: number;
                /**
                 * The name of the brand. Must be unique.
                 * Required in POST.
                 */
                name: string;
                /** The title shown in the browser while viewing the brand. */
                page_title?: string;
                /** Comma-separated list of meta keywords to include in the HTML. */
                meta_keywords?: string[];
                /** A meta description to include. */
                meta_description?: string;
                /** A comma-separated list of keywords that can be used to locate this brand. */
                search_keywords?: string;
                /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
                image_url?: string;
                /** The custom URL for the brand on the storefront. */
                custom_url?: {
                    /** Brand URL on the storefront. */
                    url?: string;
                    /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                    is_customized?: boolean;
                };
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    BrandCollectionResponse: {
        schema: {
            data?: {
                /** Unique ID of the *Brand*. Read-Only. */
                id?: number;
                /**
                 * The name of the brand. Must be unique.
                 * Required in POST.
                 */
                name: string;
                /** The title shown in the browser while viewing the brand. */
                page_title?: string;
                /** Comma-separated list of meta keywords to include in the HTML. */
                meta_keywords?: string[];
                /** A meta description to include. */
                meta_description?: string;
                /** A comma-separated list of keywords that can be used to locate this brand. */
                search_keywords?: string;
                /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
                image_url?: string;
                /** The custom URL for the brand on the storefront. */
                custom_url?: {
                    /** Brand URL on the storefront. */
                    url?: string;
                    /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                    is_customized?: boolean;
                };
            }[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    BrandImageUpload: {
        schema: {
            data?: {
                image_url?: string;
            };
            meta?: {
                [key: string]: any;
            };
        };
    };
    MetafieldCollectionResponse: {
        schema: {
            data?: {
                /** Unique ID of the *Metafield*. Read-Only. */
                id?: number;
                /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
                permission_set: 'app_only' | 'read' | 'write';
                /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
                namespace: string;
                /** The name of the field, for example: `location_id`, `color`. Required for POST. */
                key: string;
                /** The value of the field, for example: `1`, `blue`. Required for POST. */
                value: string;
                /** Description for the metafields. */
                description?: string;
                /** The type of resource with which the metafield is associated. */
                resource_type?: 'category' | 'brand' | 'product' | 'variant';
                /** The ID for the resource with which the metafield is associated. */
                resource_id?: number;
                /** Date and time of the metafield's creation. Read-Only. */
                created_at?: string;
                /** Date and time when the metafield was last updated. Read-Only. */
                updated_at?: string;
            }[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    MetafieldResponse: {
        schema: {
            /** Common Metafield properties. */
            data?: {
                /** Unique ID of the *Metafield*. Read-Only. */
                id?: number;
                /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
                permission_set: 'app_only' | 'read' | 'write';
                /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
                namespace: string;
                /** The name of the field, for example: `location_id`, `color`. Required for POST. */
                key: string;
                /** The value of the field, for example: `1`, `blue`. Required for POST. */
                value: string;
                /** Description for the metafields. */
                description?: string;
                /** The type of resource with which the metafield is associated. */
                resource_type?: 'category' | 'brand' | 'product' | 'variant';
                /** The ID for the resource with which the metafield is associated. */
                resource_id?: number;
                /** Date and time of the metafield's creation. Read-Only. */
                created_at?: string;
                /** Date and time when the metafield was last updated. Read-Only. */
                updated_at?: string;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    CategoryCollectionResponse: {
        schema: {
            data?: {
                [key: string]: any;
            }[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    CategoryResponse: {
        schema: {
            data?: definitions['category_Full'];
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    ProductResponse: {
        schema: {
            data?: definitions['product_Full'];
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    BulkPricingRuleResponse: {
        schema: {
            data?: definitions['bulkPricingRule_Full'];
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    BulkPricingRuleCollectionResponse: {
        schema: {
            data?: definitions['bulkPricingRule_Full'][];
            meta?: definitions['metaCollection_Full'];
        };
    };
    ComplexRuleCollectionResponse: {
        schema: {
            data?: {
                /**
                 * The unique numeric ID of the rule; increments sequentially.
                 * Read-Only
                 */
                id?: number;
                /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
                product_id?: number;
                /** The priority to give this rule when making adjustments to the product properties. */
                sort_order?: number;
                /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
                enabled?: boolean;
                /** Flag for determining whether other rules should not be applied after this rule has been applied. */
                stop?: boolean;
                /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
                purchasing_disabled?: boolean;
                /** Message displayed on the storefront when a rule disables the purchasing of a product. */
                purchasing_disabled_message?: string;
                /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
                purchasing_hidden?: boolean;
                /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
                image_url?: string;
                /** Adjuster for Complex Rules. */
                price_adjuster?: {
                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster_value?: number;
                };
                /** Adjuster for Complex Rules. */
                weight_adjuster?: {
                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster_value?: number;
                };
                conditions?: {
                    /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
                    id?: number;
                    /**
                     * The unique numeric ID of the rule with which the condition is associated.
                     * Read-Only
                     */
                    rule_id?: number;
                    /**
                     * The unique numeric ID of the modifier with which the rule condition is associated.
                     * Required in /POST.
                     */
                    modifier_id: number;
                    /**
                     * The unique numeric ID of the modifier value with which the rule condition is associated.
                     * Required in /POST.
                     */
                    modifier_value_id: number;
                    /**
                     * The unique numeric ID of the variant with which the rule condition is associated.
                     * Required in /POST.
                     */
                    variant_id: number;
                    /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                    combination_id?: number;
                }[];
            }[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    ComplexRuleResponse: {
        schema: {
            /** Common ComplexRule properties. */
            data?: {
                /**
                 * The unique numeric ID of the rule; increments sequentially.
                 * Read-Only
                 */
                id?: number;
                /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
                product_id?: number;
                /** The priority to give this rule when making adjustments to the product properties. */
                sort_order?: number;
                /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
                enabled?: boolean;
                /** Flag for determining whether other rules should not be applied after this rule has been applied. */
                stop?: boolean;
                /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
                purchasing_disabled?: boolean;
                /** Message displayed on the storefront when a rule disables the purchasing of a product. */
                purchasing_disabled_message?: string;
                /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
                purchasing_hidden?: boolean;
                /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
                image_url?: string;
                /** Adjuster for Complex Rules. */
                price_adjuster?: {
                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster_value?: number;
                };
                /** Adjuster for Complex Rules. */
                weight_adjuster?: {
                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster_value?: number;
                };
                conditions?: {
                    /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
                    id?: number;
                    /**
                     * The unique numeric ID of the rule with which the condition is associated.
                     * Read-Only
                     */
                    rule_id?: number;
                    /**
                     * The unique numeric ID of the modifier with which the rule condition is associated.
                     * Required in /POST.
                     */
                    modifier_id: number;
                    /**
                     * The unique numeric ID of the modifier value with which the rule condition is associated.
                     * Required in /POST.
                     */
                    modifier_value_id: number;
                    /**
                     * The unique numeric ID of the variant with which the rule condition is associated.
                     * Required in /POST.
                     */
                    variant_id: number;
                    /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                    combination_id?: number;
                }[];
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    CustomFieldCollectionResponse: {
        schema: {
            data?: {
                /**
                 * The unique numeric ID of the custom field; increments sequentially.
                 * Read-Only
                 */
                id?: number;
                /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                name: string;
                /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                value: string;
            }[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    CustomFieldResponse: {
        schema: {
            /** Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date. */
            data?: {
                /**
                 * The unique numeric ID of the custom field; increments sequentially.
                 * Read-Only
                 */
                id?: number;
                /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                name: string;
                /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                value: string;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    ProductImageCollectionResponse: {
        schema: {
            data?: ({
                /** The unique numeric ID of the image; increments sequentially. */
                id?: number;
                /** The unique numeric identifier for the product with which the image is associated. */
                product_id?: number;
                /** The local path to the original image file uploaded to BigCommerce. */
                image_file?: string;
                /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                url_zoom?: string;
                /** The standard URL for this image. By default, this is used for product-page images. */
                url_standard?: string;
                /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                url_thumbnail?: string;
                /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                url_tiny?: string;
                /** The date on which the product image was modified. */
                date_modified?: string;
                /** Flag for identifying whether the image is used as the product's thumbnail. */
                is_thumbnail?: boolean;
                /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
                sort_order?: number;
                /** The description for the image. */
                description?: string;
            } & {
                /** The unique numeric ID of the image; increments sequentially. */
                id?: number;
                /** The unique numeric identifier for the product with which the image is associated. */
                product_id?: number;
                /** The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
                image_file?: string;
                /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                url_zoom?: string;
                /** The standard URL for this image. By default, this is used for product-page images. */
                url_standard?: string;
                /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                url_thumbnail?: string;
                /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                url_tiny?: string;
                /** The date on which the product image was modified. */
                date_modified?: string;
                /**
                 * Publically available URL.
                 * Use the image_url when creating a product.
                 */
                image_url?: string;
            })[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    ProductImageResponse: {
        schema: {
            data?: {
                /** The unique numeric ID of the image; increments sequentially. */
                id?: number;
                /** The unique numeric identifier for the product with which the image is associated. */
                product_id?: number;
                /** The local path to the original image file uploaded to BigCommerce. */
                image_file?: string;
                /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                url_zoom?: string;
                /** The standard URL for this image. By default, this is used for product-page images. */
                url_standard?: string;
                /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                url_thumbnail?: string;
                /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                url_tiny?: string;
                /** The date on which the product image was modified. */
                date_modified?: string;
                /** Flag for identifying whether the image is used as the product's thumbnail. */
                is_thumbnail?: boolean;
                /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
                sort_order?: number;
                /** The description for the image. */
                description?: string;
            } & {
                /** The unique numeric ID of the image; increments sequentially. */
                id?: number;
                /** The unique numeric identifier for the product with which the image is associated. */
                product_id?: number;
                /** The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
                image_file?: string;
                /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                url_zoom?: string;
                /** The standard URL for this image. By default, this is used for product-page images. */
                url_standard?: string;
                /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                url_thumbnail?: string;
                /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                url_tiny?: string;
                /** The date on which the product image was modified. */
                date_modified?: string;
                /**
                 * Publically available URL.
                 * Use the image_url when creating a product.
                 */
                image_url?: string;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    ModifierCollectionResponse: {
        schema: {
            data?: ({
                /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
                required: boolean;
                /** The order the modifiers display on the product detail page. */
                sort_order?: number;
                /** The values for option config can vary based on the Modifier created. */
                config?: {
                    /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                    default_value?: string;
                    /** (checkbox) Flag for setting the checkbox to be checked by default. */
                    checked_by_default?: boolean;
                    /** (checkbox) Label displayed for the checkbox option. */
                    checkbox_label?: string;
                    /** (date) Flag to limit the dates allowed to be entered on a date option. */
                    date_limited?: boolean;
                    /** (date) The type of limit that is allowed to be entered on a date option. */
                    date_limit_mode?: 'earliest' | 'range' | 'latest';
                    /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                    date_earliest_value?: string;
                    /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                    date_latest_value?: string;
                    /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                    file_types_mode?: 'specific' | 'all';
                    /**
                     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                     *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                     *   `other` - Allows file types defined in the `file_types_other` array.
                     */
                    file_types_supported?: string[];
                    /** (file) A list of other file types allowed with the file upload option. */
                    file_types_other?: string[];
                    /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                    file_max_size?: number;
                    /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                    text_characters_limited?: boolean;
                    /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                    text_min_length?: number;
                    /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                    text_max_length?: number;
                    /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                    text_lines_limited?: boolean;
                    /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                    text_max_lines?: number;
                    /** (numbers_only_text) Flag to limit the value of a number option. */
                    number_limited?: boolean;
                    /** (numbers_only_text) The type of limit on values entered for a number option. */
                    number_limit_mode?: 'lowest' | 'highest' | 'range';
                    /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                    number_lowest_value?: number;
                    /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                    number_highest_value?: number;
                    /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                    number_integers_only?: boolean;
                    /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                    product_list_adjusts_inventory?: boolean;
                    /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                    product_list_adjusts_pricing?: boolean;
                    /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                    product_list_shipping_calc?: 'none' | 'weight' | 'package';
                };
                option_values?: (({
                    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /** The text display identifying the value on the storefront. Required in a /POST. */
                    label: string;
                    /** The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: any;
                    };
                } & {
                    adjusters?: {
                        /** Adjuster for Complex Rules. */
                        price?: {
                            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: 'relative' | 'percentage';
                            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster_value?: number;
                        };
                        /** Adjuster for Complex Rules. */
                        weight?: {
                            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: 'relative' | 'percentage';
                            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster_value?: number;
                        };
                        /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                        image_url?: string;
                        purchasing_disabled?: {
                            /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                            status?: boolean;
                            /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                            message?: string;
                        };
                    };
                }) & {
                    /** The unique numeric ID of the value; increments sequentially. */
                    id?: number;
                })[];
            } & {
                /** The unique numeric ID of the modifier; increments sequentially. */
                id?: number;
                /** The unique numeric ID of the product to which the option belongs. */
                product_id?: number;
                /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
                name?: string;
                /** The name of the option shown on the storefront. */
                display_name?: string;
            })[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    ModifierResponse: {
        schema: {
            /** Product Modifier */
            data?: {
                /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
                required: boolean;
                /** The order the modifiers display on the product detail page. */
                sort_order?: number;
                /** The values for option config can vary based on the Modifier created. */
                config?: {
                    /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                    default_value?: string;
                    /** (checkbox) Flag for setting the checkbox to be checked by default. */
                    checked_by_default?: boolean;
                    /** (checkbox) Label displayed for the checkbox option. */
                    checkbox_label?: string;
                    /** (date) Flag to limit the dates allowed to be entered on a date option. */
                    date_limited?: boolean;
                    /** (date) The type of limit that is allowed to be entered on a date option. */
                    date_limit_mode?: 'earliest' | 'range' | 'latest';
                    /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                    date_earliest_value?: string;
                    /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                    date_latest_value?: string;
                    /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                    file_types_mode?: 'specific' | 'all';
                    /**
                     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                     *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                     *   `other` - Allows file types defined in the `file_types_other` array.
                     */
                    file_types_supported?: string[];
                    /** (file) A list of other file types allowed with the file upload option. */
                    file_types_other?: string[];
                    /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                    file_max_size?: number;
                    /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                    text_characters_limited?: boolean;
                    /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                    text_min_length?: number;
                    /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                    text_max_length?: number;
                    /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                    text_lines_limited?: boolean;
                    /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                    text_max_lines?: number;
                    /** (numbers_only_text) Flag to limit the value of a number option. */
                    number_limited?: boolean;
                    /** (numbers_only_text) The type of limit on values entered for a number option. */
                    number_limit_mode?: 'lowest' | 'highest' | 'range';
                    /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                    number_lowest_value?: number;
                    /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                    number_highest_value?: number;
                    /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                    number_integers_only?: boolean;
                    /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                    product_list_adjusts_inventory?: boolean;
                    /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                    product_list_adjusts_pricing?: boolean;
                    /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                    product_list_shipping_calc?: 'none' | 'weight' | 'package';
                };
                option_values?: (({
                    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /** The text display identifying the value on the storefront. Required in a /POST. */
                    label: string;
                    /** The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: any;
                    };
                } & {
                    adjusters?: {
                        /** Adjuster for Complex Rules. */
                        price?: {
                            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: 'relative' | 'percentage';
                            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster_value?: number;
                        };
                        /** Adjuster for Complex Rules. */
                        weight?: {
                            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: 'relative' | 'percentage';
                            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster_value?: number;
                        };
                        /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                        image_url?: string;
                        purchasing_disabled?: {
                            /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                            status?: boolean;
                            /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                            message?: string;
                        };
                    };
                }) & {
                    /** The unique numeric ID of the value; increments sequentially. */
                    id?: number;
                })[];
            } & {
                /** The unique numeric ID of the modifier; increments sequentially. */
                id?: number;
                /** The unique numeric ID of the product to which the option belongs. */
                product_id?: number;
                /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
                name?: string;
                /** The name of the option shown on the storefront. */
                display_name?: string;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    ModifierValueCollectionResponse: {
        schema: {
            data?: (({
                /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                is_default?: boolean;
                /** The text display identifying the value on the storefront. Required in a /POST. */
                label: string;
                /** The order in which the value will be displayed on the product page. Required in a /POST. */
                sort_order: number;
                /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: {
                    [key: string]: any;
                };
            } & {
                adjusters?: {
                    /** Adjuster for Complex Rules. */
                    price?: {
                        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster?: 'relative' | 'percentage';
                        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster_value?: number;
                    };
                    /** Adjuster for Complex Rules. */
                    weight?: {
                        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster?: 'relative' | 'percentage';
                        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster_value?: number;
                    };
                    /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                    image_url?: string;
                    purchasing_disabled?: {
                        /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                        status?: boolean;
                        /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                        message?: string;
                    };
                };
            }) & {
                /** The unique numeric ID of the value; increments sequentially. */
                id?: number;
            })[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    ModifierValueResponse: {
        schema: {
            /** Part of Modifier Value Response */
            data?: ({
                /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                is_default?: boolean;
                /** The text display identifying the value on the storefront. Required in a /POST. */
                label: string;
                /** The order in which the value will be displayed on the product page. Required in a /POST. */
                sort_order: number;
                /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: {
                    [key: string]: any;
                };
            } & {
                adjusters?: {
                    /** Adjuster for Complex Rules. */
                    price?: {
                        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster?: 'relative' | 'percentage';
                        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster_value?: number;
                    };
                    /** Adjuster for Complex Rules. */
                    weight?: {
                        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster?: 'relative' | 'percentage';
                        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster_value?: number;
                    };
                    /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                    image_url?: string;
                    purchasing_disabled?: {
                        /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                        status?: boolean;
                        /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                        message?: string;
                    };
                };
            }) & {
                /** The unique numeric ID of the value; increments sequentially. */
                id?: number;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    OptionCollectionResponse: {
        schema: {
            data?: ({
                /** The unique numerical ID of the option, increments sequentially. */
                id?: number;
                /** The unique numerical ID of the product to which the option belongs. */
                product_id?: number;
                /** The name of the option shown on the storefront. */
                display_name?: string;
                /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
                type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                /** The values for option config can vary based on the Modifier created. */
                config?: {
                    /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                    default_value?: string;
                    /** (checkbox) Flag for setting the checkbox to be checked by default. */
                    checked_by_default?: boolean;
                    /** (checkbox) Label displayed for the checkbox option. */
                    checkbox_label?: string;
                    /** (date) Flag to limit the dates allowed to be entered on a date option. */
                    date_limited?: boolean;
                    /** (date) The type of limit that is allowed to be entered on a date option. */
                    date_limit_mode?: 'earliest' | 'range' | 'latest';
                    /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                    date_earliest_value?: string;
                    /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                    date_latest_value?: string;
                    /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                    file_types_mode?: 'specific' | 'all';
                    /**
                     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                     *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                     *   `other` - Allows file types defined in the `file_types_other` array.
                     */
                    file_types_supported?: string[];
                    /** (file) A list of other file types allowed with the file upload option. */
                    file_types_other?: string[];
                    /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                    file_max_size?: number;
                    /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                    text_characters_limited?: boolean;
                    /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                    text_min_length?: number;
                    /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                    text_max_length?: number;
                    /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                    text_lines_limited?: boolean;
                    /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                    text_max_lines?: number;
                    /** (numbers_only_text) Flag to limit the value of a number option. */
                    number_limited?: boolean;
                    /** (numbers_only_text) The type of limit on values entered for a number option. */
                    number_limit_mode?: 'lowest' | 'highest' | 'range';
                    /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                    number_lowest_value?: number;
                    /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                    number_highest_value?: number;
                    /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                    number_integers_only?: boolean;
                    /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                    product_list_adjusts_inventory?: boolean;
                    /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                    product_list_adjusts_pricing?: boolean;
                    /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                    product_list_shipping_calc?: 'none' | 'weight' | 'package';
                };
                /** Order in which the option is displayed on the storefront. */
                sort_order?: number;
                option_values?: ({
                    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /** The text display identifying the value on the storefront. Required in a /POST. */
                    label: string;
                    /** The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: any;
                    };
                } & {
                    /** The unique numeric ID of the value; increments sequentially. */
                    id?: number;
                })[];
                /** Publicly available image url */
                image_url?: string;
            } & {
                /** The unique option name, auto-generated from the display name, a timestamp, and the product ID. */
                name?: string;
            })[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    OptionResponse: {
        schema: {
            data?: {
                /** The unique numerical ID of the option, increments sequentially. */
                id?: number;
                /** The unique numerical ID of the product to which the option belongs. */
                product_id?: number;
                /** The name of the option shown on the storefront. */
                display_name?: string;
                /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
                type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                /** The values for option config can vary based on the Modifier created. */
                config?: {
                    /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                    default_value?: string;
                    /** (checkbox) Flag for setting the checkbox to be checked by default. */
                    checked_by_default?: boolean;
                    /** (checkbox) Label displayed for the checkbox option. */
                    checkbox_label?: string;
                    /** (date) Flag to limit the dates allowed to be entered on a date option. */
                    date_limited?: boolean;
                    /** (date) The type of limit that is allowed to be entered on a date option. */
                    date_limit_mode?: 'earliest' | 'range' | 'latest';
                    /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                    date_earliest_value?: string;
                    /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                    date_latest_value?: string;
                    /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                    file_types_mode?: 'specific' | 'all';
                    /**
                     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                     *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                     *   `other` - Allows file types defined in the `file_types_other` array.
                     */
                    file_types_supported?: string[];
                    /** (file) A list of other file types allowed with the file upload option. */
                    file_types_other?: string[];
                    /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                    file_max_size?: number;
                    /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                    text_characters_limited?: boolean;
                    /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                    text_min_length?: number;
                    /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                    text_max_length?: number;
                    /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                    text_lines_limited?: boolean;
                    /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                    text_max_lines?: number;
                    /** (numbers_only_text) Flag to limit the value of a number option. */
                    number_limited?: boolean;
                    /** (numbers_only_text) The type of limit on values entered for a number option. */
                    number_limit_mode?: 'lowest' | 'highest' | 'range';
                    /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                    number_lowest_value?: number;
                    /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                    number_highest_value?: number;
                    /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                    number_integers_only?: boolean;
                    /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                    product_list_adjusts_inventory?: boolean;
                    /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                    product_list_adjusts_pricing?: boolean;
                    /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                    product_list_shipping_calc?: 'none' | 'weight' | 'package';
                };
                /** Order in which the option is displayed on the storefront. */
                sort_order?: number;
                option_values?: ({
                    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /** The text display identifying the value on the storefront. Required in a /POST. */
                    label: string;
                    /** The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: any;
                    };
                } & {
                    /** The unique numeric ID of the value; increments sequentially. */
                    id?: number;
                })[];
                /** Publicly available image url */
                image_url?: string;
            } & {
                /** The unique option name, auto-generated from the display name, a timestamp, and the product ID. */
                name?: string;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    OptionValueCollectionResponse: {
        schema: {
            data?: ({
                /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                is_default?: boolean;
                /** The text display identifying the value on the storefront. Required in a /POST. */
                label: string;
                /** The order in which the value will be displayed on the product page. Required in a /POST. */
                sort_order: number;
                /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: {
                    [key: string]: any;
                };
            } & {
                /** The unique numeric ID of the value; increments sequentially. */
                id?: number;
            })[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    OptionValueResponse: {
        schema: {
            data?: {
                /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                is_default?: boolean;
                /** The text display identifying the value on the storefront. Required in a /POST. */
                label: string;
                /** The order in which the value will be displayed on the product page. Required in a /POST. */
                sort_order: number;
                /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: {
                    [key: string]: any;
                };
            } & {
                /** The unique numeric ID of the value; increments sequentially. */
                id?: number;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    ProductReviewCollectionResponse: {
        schema: {
            data?: ({
                /**
                 * The title for the product review.
                 * Required in /POST.
                 */
                title: string;
                /** The text for the product review. */
                text?: string;
                /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                status?: string;
                /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                rating?: number;
                /** The email of the reviewer. Must be a valid email, or an empty string. */
                email?: string;
                /** The name of the reviewer. */
                name?: string;
                /** Date the product was reviewed. Required in /POST. */
                date_reviewed: string;
            } & {
                /** The unique numeric ID of the product review; increments sequentially. */
                id?: number;
                /** The unique numeric identifier for the product with which the review is associated. */
                product_id?: number;
                /** Date the product review was created. */
                date_created?: string;
                /** Date the product review was modified. */
                date_modified?: string;
            })[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    ProductReviewResponse: {
        schema: {
            /** A product review model. */
            data?: {
                /**
                 * The title for the product review.
                 * Required in /POST.
                 */
                title: string;
                /** The text for the product review. */
                text?: string;
                /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                status?: string;
                /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                rating?: number;
                /** The email of the reviewer. Must be a valid email, or an empty string. */
                email?: string;
                /** The name of the reviewer. */
                name?: string;
                /** Date the product was reviewed. Required in /POST. */
                date_reviewed: string;
            } & {
                /** The unique numeric ID of the product review; increments sequentially. */
                id?: number;
                /** The unique numeric identifier for the product with which the review is associated. */
                product_id?: number;
                /** Date the product review was created. */
                date_created?: string;
                /** Date the product review was modified. */
                date_modified?: string;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    VariantCollectionResponse: {
        schema: {
            data?: ({
                /** The cost price of the variant. Not affected by Price List prices. */
                cost_price?: number;
                /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
                price?: number;
                /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
                sale_price?: number;
                /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
                retail_price?: number;
                /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
                weight?: number;
                /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
                width?: number;
                /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
                height?: number;
                /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
                depth?: number;
                /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
                is_free_shipping?: boolean;
                /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
                fixed_cost_shipping_price?: number;
                /** If `true`, this variant will not be purchasable on the storefront. */
                purchasing_disabled?: boolean;
                /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
                purchasing_disabled_message?: string;
                /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
                upc?: string;
                /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
                inventory_level?: number;
                /** When the variant hits this inventory level, it is considered low stock. */
                inventory_warning_level?: number;
                /** Identifies where in a warehouse the variant is located. */
                bin_picking_number?: string;
            } & {
                id?: number;
                product_id?: number;
                sku?: string;
                /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
                sku_id?: number;
                /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
                option_values?: ({
                    /** The name of the option. */
                    option_display_name?: string;
                    /** The label of the option value. */
                    label?: string;
                } & {
                    id?: number;
                    option_id?: number;
                })[];
                /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
                calculated_price?: number;
            })[];
            /** Data about the response, including pagination and collection totals. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    VariantResponse: {
        schema: {
            data?: {
                /** The cost price of the variant. Not affected by Price List prices. */
                cost_price?: number;
                /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
                price?: number;
                /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
                sale_price?: number;
                /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
                retail_price?: number;
                /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
                weight?: number;
                /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
                width?: number;
                /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
                height?: number;
                /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
                depth?: number;
                /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
                is_free_shipping?: boolean;
                /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
                fixed_cost_shipping_price?: number;
                /** If `true`, this variant will not be purchasable on the storefront. */
                purchasing_disabled?: boolean;
                /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
                purchasing_disabled_message?: string;
                /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
                upc?: string;
                /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
                inventory_level?: number;
                /** When the variant hits this inventory level, it is considered low stock. */
                inventory_warning_level?: number;
                /** Identifies where in a warehouse the variant is located. */
                bin_picking_number?: string;
            } & {
                id?: number;
                product_id?: number;
                sku?: string;
                /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
                sku_id?: number;
                /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
                option_values?: ({
                    /** The name of the option. */
                    option_display_name?: string;
                    /** The label of the option value. */
                    label?: string;
                } & {
                    id?: number;
                    option_id?: number;
                })[];
                /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
                calculated_price?: number;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    ProductVideoCollectionResponse: {
        schema: {
            data?: ({
                /** The title for the video. If left blank, this will be filled in according to data on a host site. */
                title?: string;
                /** The description for the video. If left blank, this will be filled in according to data on a host site. */
                description?: string;
                /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
                sort_order?: number;
                /** The video type (a short name of a host site). */
                type?: 'youtube';
            } & {
                /** The unique numeric ID of the product video; increments sequentially. */
                id?: number;
                /** The ID of the video on a host site. */
                video_id?: string;
                /** The unique numeric identifier for the product with which the image is associated. */
                product_id?: number;
                /** Length of the video. This will be filled in according to data on a host site. */
                length?: string;
            })[];
            /** Data about the response, including pagination and collection totals. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    ProductVideoResponse: {
        schema: {
            /** A product video model. */
            data?: {
                /** The title for the video. If left blank, this will be filled in according to data on a host site. */
                title?: string;
                /** The description for the video. If left blank, this will be filled in according to data on a host site. */
                description?: string;
                /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
                sort_order?: number;
                /** The video type (a short name of a host site). */
                type?: 'youtube';
            } & {
                /** The unique numeric ID of the product video; increments sequentially. */
                id?: number;
                /** The ID of the video on a host site. */
                video_id?: string;
                /** The unique numeric identifier for the product with which the image is associated. */
                product_id?: number;
                /** Length of the video. This will be filled in according to data on a host site. */
                length?: string;
            };
            meta?: definitions['metaEmpty_Full'];
        };
    };
    CatalogSummaryResponse: {
        schema: {
            /** Catalog Summary object describes a lightweight summary of the catalog. */
            data?: {
                /** A count of all inventory items in the catalog. */
                inventory_count?: number;
                /** Total value of store's inventory. */
                inventory_value?: number;
                /** ID of the category containing the most products. */
                primary_category_id?: number;
                /** Name of the category containing the most products. */
                primary_category_name?: string;
                /** Total number of variants */
                variant_count?: number;
                /** Highest priced variant */
                highest_variant_price?: number;
                /** Average price of all variants */
                average_variant_price?: number;
                /** Lowest priced variant in the store */
                lowest_variant_price?: string;
                oldest_variant_date?: string;
                newest_variant_date?: string;
            };
            /** Empty meta object; may be used later. */
            meta?: {
                [key: string]: any;
            };
        };
    };
    CatalogVariantCollectionResponse: {
        schema: {
            data?: ({
                /** The cost price of the variant. Not affected by Price List prices. */
                cost_price?: number;
                /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
                price?: number;
                /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
                sale_price?: number;
                /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
                retail_price?: number;
                /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
                weight?: number;
                /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
                width?: number;
                /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
                height?: number;
                /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
                depth?: number;
                /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
                is_free_shipping?: boolean;
                /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
                fixed_cost_shipping_price?: number;
                /** If `true`, this variant will not be purchasable on the storefront. */
                purchasing_disabled?: boolean;
                /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
                purchasing_disabled_message?: string;
                /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
                upc?: string;
                /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
                inventory_level?: number;
                /** When the variant hits this inventory level, it is considered low stock. */
                inventory_warning_level?: number;
                /** Identifies where in a warehouse the variant is located. */
                bin_picking_number?: string;
            } & {
                id?: number;
                product_id?: number;
                sku?: string;
                /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
                sku_id?: number;
                /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
                option_values?: ({
                    /** The name of the option. */
                    option_display_name?: string;
                    /** The label of the option value. */
                    label?: string;
                } & {
                    id?: number;
                    option_id?: number;
                })[];
                /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
                calculated_price?: number;
            })[];
            meta?: definitions['metaCollection_Full'];
        };
    };
    /** The requested category was not found. */
    Error404Response: {
        schema: definitions['error_Base'];
    };
    /**
     * Unprocessable entity.
     *
     * Please verify if all requested products are assigned to the category.
     *
     * Please verify if all required fields are present in the request body and are filled with values correctly.
     */
    Error422Response: {
        schema: definitions['error_Base'];
    };
    ProductSortOrderResponse: {
        schema: {
            data?: definitions['productSortOrder'][];
        } & {
            meta?: definitions['metaCollection_Full'];
        };
    };
}
interface operations {
    /** Returns a list of **Products**. Optional filter parameters can be passed in. */
    getProducts: {
        parameters: {
            query: {
                /** Filter items by id. */
                id?: parameters['FilterIdParam'];
                'id:in'?: parameters['FilterIdIn'];
                'id:not_in'?: parameters['FilterIdNotIn'];
                'id:min'?: parameters['FilterIdMin'];
                'id:max'?: parameters['FilterIdMax'];
                'id:greater'?: parameters['FilterIdGreater'];
                'id:less'?: parameters['FilterIdLess'];
                /** Filter items by name. */
                name?: string;
                /** Filter items by upc. */
                upc?: string;
                /** Filter items by price. */
                price?: number;
                /** Filter items by weight. */
                weight?: number;
                /** Filter items by condition. */
                condition?: 'new' | 'used' | 'refurbished';
                /** Filter items by brand_id. */
                brand_id?: number;
                /** Filter items by `date_modified`. */
                date_modified?: string;
                /** Filter items by `date_modified`. For example, `date_modified:max=2020-06-15`. */
                'date_modified:max'?: string;
                /** Filter items by `date_modified`. For example, `date_modified:min=2018-06-15`. */
                'date_modified:min'?: string;
                /** Filter items by date_last_imported. */
                date_last_imported?: string;
                /** Filter items by date_last_imported. For example, `date_last_imported:max=2020-06-15`. */
                'date_last_imported:max'?: string;
                /** Filter items by date_last_imported. For example, `date_last_imported:min=2018-06-15`. */
                'date_last_imported:min'?: string;
                /** Filter items based on whether the product is currently visible on the storefront. */
                is_visible?: boolean;
                /** Filter items by is_featured. `0` for true, `1` for false. */
                is_featured?: 1 | 0;
                /** Filter items by is_free_shipping. */
                is_free_shipping?: number;
                /** Filter items by inventory_level. */
                inventory_level?: number;
                'inventory_level:in'?: number;
                'inventory_level:not_in'?: number;
                'inventory_level:min'?: number;
                'inventory_level:max'?: number;
                'inventory_level:greater'?: number;
                'inventory_level:less'?: number;
                /** Filter items by inventory_low. Values: 1, 0. */
                inventory_low?: number;
                /** Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
                out_of_stock?: number;
                /** Filter items by total_sold. */
                total_sold?: number;
                /** Filter items by type. */
                type?: 'digital' | 'physical';
                /**
                 * Filter items by categories.
                 *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
                 */
                categories?: number;
                /** Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
                keyword?: string;
                /** Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results. */
                keyword_context?: 'shopper' | 'merchant';
                /** Filter items by status. */
                status?: number;
                /** Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
                include?: 'variants' | 'images' | 'custom_fields' | 'bulk_pricing_rules' | 'primary_image' | 'modifiers' | 'options' | 'videos';
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Filter items by availability. Values are: available, disabled, preorder. */
                availability?: 'available' | 'disabled' | 'preorder';
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Sort direction. Acceptable values are: `asc`, `desc`. */
                direction?: 'asc' | 'desc';
                /** Field name to sort by. Note: Since `id` increments when new products are added, you can use that field to sort by product create date. */
                sort?: 'id' | 'name' | 'sku' | 'price' | 'date_modified' | 'date_last_imported' | 'inventory_level' | 'is_visible' | 'total_sold';
                /** Filter items by categories. Use for products in multiple categories. For example, `categories:in=12`. */
                'categories:in'?: number;
            };
        };
        responses: {
            200: responses['ProductCollectionResponse'];
        };
    };
    /**
     * Updates products in batches. At the time of writing, batches are limited to 10 products.
     *
     * **Required Fields**
     * * `id` - product `id` is required for batch updates to products.
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     */
    updateProducts: {
        parameters: {
            header: {
                Accept: string;
                'Content-Type': string;
            };
            body: {
                products?: definitions['product_Put_Collection'];
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: parameters['FilterIncludeFieldsParam'];
            };
        };
        responses: {
            200: responses['ProductCollectionResponse'];
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** `Product` was in conflict with another product. This is the result of duplicate unique values such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
            409: {
                schema: definitions['errorResponse_409'];
            };
            /** 413 Request Entity Too Large */
            413: {
                schema: definitions['error_Base'];
            };
            /** `Product` was not valid. This is the result of missing required fields or invalid data. See the response for more details. */
            422: {
                schema: definitions['errorResponse_422'];
            };
        };
    };
    /**
     * Creates a *Product*. Only one product can be created at a time.
     *
     * **Required Fields:**
     * - `name`
     * - `type`
     * - `weight`
     * - `price`
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     *
     * **Usage Notes**
     * * `POST` requests to `/products` accepts a single `video` object; to send an array of video objects, see: `/products/{product_id}/videos`.
     */
    createProduct: {
        parameters: {
            body: {
                product: definitions['product_Post'];
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: parameters['FilterIncludeFieldsParam'];
            };
        };
        responses: {
            200: responses['ProductResponse'];
            /** `Product` was in conflict with another product. This is the result of duplicate unique values, such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /**
     * To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
     *
     * **Example**:
     * To delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
     */
    deleteProducts: {
        parameters: {
            query: {
                /** Filter items by name. */
                name?: string;
                /** Filter items by sku. */
                sku?: string;
                /** Filter items by price. */
                price?: number;
                /** Filter items by weight. */
                weight?: number;
                /** Filter items by condition. */
                condition?: 'new' | 'used' | 'refurbished';
                /** Filter items by brand_id. */
                brand_id?: number;
                /** Filter items by date_modified. For example `v3/catalog/products?date_modified:min=2018-06-15` */
                date_modified?: string;
                /** Filter items by date_last_imported. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
                date_last_imported?: string;
                /** Filter items by if visible on the storefront. */
                is_visible?: boolean;
                /** Filter items by is_featured. */
                is_featured?: number;
                /** Filter items by inventory_level. */
                inventory_level?: number;
                /** Filter items by total_sold. */
                total_sold?: number;
                /** Filter items by type: `physical` or `digital`. */
                type?: 'digital' | 'physical';
                /**
                 * Filter items by categories.
                 *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
                 */
                categories?: number;
                /** Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
                keyword?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a single *Product*. Optional parameters can be passed in. */
    getProductById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
                include?: 'variants' | 'images' | 'custom_fields' | 'bulk_pricing_rules' | 'primary_image' | 'modifiers' | 'options' | 'videos';
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['product_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Product*.
     *
     * **Read-Only Fields**
     * - id
     * - date_created
     * - date_modified
     * - calculated_price
     * - base_variant_id
     */
    updateProduct: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                product: definitions['product_Put'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: parameters['FilterIncludeFieldsParam'];
            };
        };
        responses: {
            200: responses['ProductResponse'];
            /** Created */
            201: {
                schema: {
                    [key: string]: any;
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** `Product` was in conflict with another product. This is caused by: duplicate unique values, such as name or SKU; a missing category, brand, or tax_class with which the product is being associated; or a conflicting bulk pricing rule. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Product*. */
    deleteProductById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of *Product Images*. Optional parameters can be passed in. */
    getProductImages: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productImage_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** There are not any images on this product. */
            204: never;
            /** The product ID does not exist. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a *Product Image*.
     *
     *  **Required Fields**
     * - `image_file`, or
     * - `image_url`
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - For file uploads, use the `multipart/form-data` media type
     * - Only one image at a time can be created
     * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
     */
    createProductImage: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                productImage: {
                    /** The unique numeric ID of the image; increments sequentially. */
                    id?: number;
                    /** The unique numeric identifier for the product with which the image is associated. */
                    product_id?: number;
                    /**
                     * The local path to the original image file uploaded to BigCommerce.
                     * A `multipart/form-data` media type.
                     */
                    image_file?: string;
                    /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                    url_zoom?: string;
                    /** The standard URL for this image. By default, this is used for product-page images. */
                    url_standard?: string;
                    /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                    url_thumbnail?: string;
                    /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                    url_tiny?: string;
                    /** The date on which the product image was modified. */
                    date_modified?: string;
                    /** Flag for identifying whether the image is used as the product's thumbnail. */
                    is_thumbnail?: boolean;
                    /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
                    sort_order?: number;
                    /** The description for the image. */
                    description?: string;
                } & {
                    /** Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
                    image_url?: string;
                    /** Must be sent as a multipart/form-data field in the request body. */
                    image_file?: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        /** The unique numeric ID of the image; increments sequentially. */
                        id?: number;
                        /** The unique numeric identifier for the product with which the image is associated. */
                        product_id?: number;
                        /**
                         * The local path to the original image file uploaded to BigCommerce.
                         *
                         * A `multipart/form-data` media type.
                         */
                        image_file?: string;
                        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                        url_zoom?: string;
                        /** The standard URL for this image. By default, this is used for product-page images. */
                        url_standard?: string;
                        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                        url_thumbnail?: string;
                        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                        url_tiny?: string;
                        /** The date on which the product image was modified. */
                        date_modified?: string;
                        /** Flag for identifying whether the image is used as the product's thumbnail. */
                        is_thumbnail?: boolean;
                        /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
                        sort_order?: number;
                        /** The description for the image. */
                        description?: string;
                    } & {
                        /** The unique numeric ID of the image; increments sequentially. */
                        id?: number;
                        /** The unique numeric identifier for the product with which the image is associated. */
                        product_id?: number;
                        /**
                         * The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
                         * A `multipart/form-data` media type.
                         */
                        image_file?: string;
                        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                        url_zoom?: string;
                        /** The standard URL for this image. By default, this is used for product-page images. */
                        url_standard?: string;
                        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                        url_thumbnail?: string;
                        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                        url_tiny?: string;
                        /** The date on which the product image was modified. */
                        date_modified?: string;
                        /**
                         * Publically available URL.
                         * Use the image_url when creating a product.
                         */
                        image_url?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The product ID does not exist. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Returns a single *Product Image*. Optional parameters can be passed in. */
    getProductImageById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Image` that is being operated on. */
                image_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productImage_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Product Image*.
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - For file uploads, send a POST request using the `multipart/form-data` media type
     */
    updateProductImage: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Image` that is being operated on. */
                image_id: number;
            };
            body: {
                productImage: {
                    /** The unique numeric ID of the image; increments sequentially. */
                    id?: number;
                    /** The unique numeric identifier for the product with which the image is associated. */
                    product_id?: number;
                    /** The local path to the original image file uploaded to BigCommerce. */
                    image_file?: string;
                    /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                    url_zoom?: string;
                    /** The standard URL for this image. By default, this is used for product-page images. */
                    url_standard?: string;
                    /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                    url_thumbnail?: string;
                    /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                    url_tiny?: string;
                    /** The date on which the product image was modified. */
                    date_modified?: string;
                    /** Flag for identifying whether the image is used as the product's thumbnail. */
                    is_thumbnail?: boolean;
                    /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
                    sort_order?: number;
                    /** The description for the image. */
                    description?: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        /** The unique numeric ID of the image; increments sequentially. */
                        id?: number;
                        /** The unique numeric identifier for the product with which the image is associated. */
                        product_id?: number;
                        /** The local path to the original image file uploaded to BigCommerce. */
                        image_file?: string;
                        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                        url_zoom?: string;
                        /** The standard URL for this image. By default, this is used for product-page images. */
                        url_standard?: string;
                        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                        url_thumbnail?: string;
                        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                        url_tiny?: string;
                        /** The date on which the product image was modified. */
                        date_modified?: string;
                        /** Flag for identifying whether the image is used as the product's thumbnail. */
                        is_thumbnail?: boolean;
                        /** The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
                        sort_order?: number;
                        /** The description for the image. */
                        description?: string;
                    } & {
                        /** The unique numeric ID of the image; increments sequentially. */
                        id?: number;
                        /** The unique numeric identifier for the product with which the image is associated. */
                        product_id?: number;
                        /** The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
                        image_file?: string;
                        /** The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
                        url_zoom?: string;
                        /** The standard URL for this image. By default, this is used for product-page images. */
                        url_standard?: string;
                        /** The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
                        url_thumbnail?: string;
                        /** The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
                        url_tiny?: string;
                        /** The date on which the product image was modified. */
                        date_modified?: string;
                        /**
                         * Publically available URL.
                         * Use the image_url when creating a product.
                         */
                        image_url?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Deletes a *Product Image*. */
    deleteProductImage: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Image` that is being operated on. */
                image_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of *Product Videos*. Optional parameters can be passed in. */
    getProductVideos: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: parameters['PageParam'];
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: parameters['LimitParam'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productVideo_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
        };
    };
    /**
     * Creates a *Product Video*.
     *
     * **Required Fields**
     * * video_id - Example: https://www.youtube.com/watch?v=`R12345677`
     *
     * **Read-Only Fields**
     * * id
     *
     * Publicly accessible URLs are valid parameters.
     * Videos must be loaded through YouTube at this time.
     */
    createProductVideo: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                productVideo: {
                    /** The title for the video. If left blank, this will be filled in according to data on a host site. */
                    title?: string;
                    /** The description for the video. If left blank, this will be filled in according to data on a host site. */
                    description?: string;
                    /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
                    sort_order?: number;
                    /** The video type (a short name of a host site). */
                    type?: 'youtube';
                } & {
                    /** The ID of the video on a host site. */
                    video_id?: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** A product video model. */
                    data?: {
                        /** The title for the video. If left blank, this will be filled in according to data on a host site. */
                        title?: string;
                        /** The description for the video. If left blank, this will be filled in according to data on a host site. */
                        description?: string;
                        /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
                        sort_order?: number;
                        /** The video type (a short name of a host site). */
                        type?: 'youtube';
                    } & {
                        /** The unique numeric ID of the product video; increments sequentially. */
                        id?: number;
                        /** The ID of the video on a host site. */
                        video_id?: string;
                        /** The unique numeric identifier for the product with which the image is associated. */
                        product_id?: number;
                        /** Length of the video. This will be filled in according to data on a host site. */
                        length?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Returns a single *Product Video*. Optional parameters can be passed in. */
    getProductVideoById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The BigCommerce ID of the `Video` */
                id: parameters['VideoIdParam'];
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productVideo_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Product Video.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    updateProductVideo: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The BigCommerce ID of the `Video` */
                id: parameters['VideoIdParam'];
            };
            body: {
                productVideo: {
                    /** The title for the video. If left blank, this will be filled in according to data on a host site. */
                    title?: string;
                    /** The description for the video. If left blank, this will be filled in according to data on a host site. */
                    description?: string;
                    /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
                    sort_order?: number;
                    /** The video type (a short name of a host site). */
                    type?: 'youtube';
                } & {
                    /** The unique numeric ID of the product video; increments sequentially. */
                    id?: number;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** A product video model. */
                    data?: {
                        /** The title for the video. If left blank, this will be filled in according to data on a host site. */
                        title?: string;
                        /** The description for the video. If left blank, this will be filled in according to data on a host site. */
                        description?: string;
                        /** The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
                        sort_order?: number;
                        /** The video type (a short name of a host site). */
                        type?: 'youtube';
                    } & {
                        /** The unique numeric ID of the product video; increments sequentially. */
                        id?: number;
                        /** The ID of the video on a host site. */
                        video_id?: string;
                        /** The unique numeric identifier for the product with which the image is associated. */
                        product_id?: number;
                        /** Length of the video. This will be filled in according to data on a host site. */
                        length?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Deletes a *Product Video*. */
    deleteProductVideo: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The BigCommerce ID of the `Video` */
                id: parameters['VideoIdParam'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of product *Variants*. Optional parameters can be passed in. */
    getVariantsByProductId: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productVariant_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a *Product Variant*.
     *
     * **Required Fields**
     * * sku
     * * option_values
     *
     * **Read-Only Fields**
     * * id
     *
     * Variants need to be created one at a time using this endpoint. To use a variant array and create products and variants in the same call use the [Create Products](/api-reference/catalog/catalog-api/products/createproduct) during the initial product creation.
     */
    createVariant: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                Variant: definitions['productVariant_Post'];
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productVariant_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Returns a single product *Variant*. Optional parameters can be passed in. */
    getVariantById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productVariant_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Updates a product *Variant*. */
    updateVariant: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            body: {
                Variant: definitions['productVariant_Put'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productVariant_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Deletes a product *Variant*. */
    deleteVariantById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of product variant *Metafields*. Optional parameters can be passed in. */
    getVariantMetafieldsByProductIdAndVariantId: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Filter based on a metafield's key. */
                key?: string;
                /** Filter based on a metafield's namespace. */
                namespace?: string;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        /** Unique ID of the *Metafield*. Read-Only. */
                        id?: number;
                        /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
                        permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
                        /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
                        namespace: string;
                        /** The name of the field, for example: `location_id`, `color`. Required for POST. */
                        key: string;
                        /** The value of the field, for example: `1`, `blue`. Required for POST. */
                        value: string;
                        /** Description for the metafields. */
                        description?: string;
                        /** The type of resource with which the metafield is associated. */
                        resource_type?: 'category' | 'brand' | 'product' | 'variant';
                        /** The ID for the resource with which the metafield is associated. */
                        resource_id?: number;
                        /** Date and time of the metafield's creation. Read-Only. */
                        created_at?: string;
                        /** Date and time when the metafield was last updated. Read-Only. */
                        updated_at?: string;
                    }[];
                    meta?: definitions['categoriesTree_Resp'];
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a product variant *Metafield*.
     *
     * **Required Fields:**
     * * permission_set
     * * namespace
     * * key
     * * value
     *
     * **Read-Only Fields**
     * * id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    createVariantMetafield: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            body: {
                Metafield: {
                    /** Unique ID of the *Metafield*. Read-Only. */
                    id?: number;
                    /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
                    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
                    /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
                    namespace: string;
                    /** The name of the field, for example: `location_id`, `color`. Required for POST. */
                    key: string;
                    /** The value of the field, for example: `1`, `blue`. Required for POST. */
                    value: string;
                    /** Description for the metafields. */
                    description?: string;
                    /** The type of resource with which the metafield is associated. */
                    resource_type?: 'category' | 'brand' | 'product' | 'variant';
                    /** The ID for the resource with which the metafield is associated. */
                    resource_id?: number;
                    /** Date and time of the metafield's creation. Read-Only. */
                    created_at?: string;
                    /** Date and time when the metafield was last updated. Read-Only. */
                    updated_at?: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Common Metafield properties. */
                    data?: {
                        /** Unique ID of the *Metafield*. Read-Only. */
                        id?: number;
                        /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
                        permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
                        /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
                        namespace: string;
                        /** The name of the field, for example: `location_id`, `color`. Required for POST. */
                        key: string;
                        /** The value of the field, for example: `1`, `blue`. Required for POST. */
                        value: string;
                        /** Description for the metafields. */
                        description?: string;
                        /** The type of resource with which the metafield is associated. */
                        resource_type?: 'category' | 'brand' | 'product' | 'variant';
                        /** The ID for the resource with which the metafield is associated. */
                        resource_id?: number;
                        /** Date and time of the metafield's creation. Read-Only. */
                        created_at?: string;
                        /** Date and time when the metafield was last updated. Read-Only. */
                        updated_at?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique-key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single product variant *Metafield*. Optional parameters can be passed in. */
    getVariantMetafieldByProductIdAndVariantId: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a product variant *Metafield*.
     *
     * **Required Fields:**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    updateVariantMetafield: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            body: {
                Metafield: definitions['metafield_Put'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Deletes a product variant *Metafield*. */
    deleteVariantMetafieldById: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /**
     * Creates a *Variant Image*.
     *
     * The image will show on the storefront when the value is selected.
     *
     *  **Required Fields**
     * - image_file: Form posts. Files larger than 1 MB are not accepted
     * - image_url: Any publicly available URL
     */
    createVariantImage: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** ID of the variant on a product, or on an associated Price List Record. */
                variant_id: number;
            };
            body: {
                body?: {
                    /** A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
                    image_url?: string;
                };
            };
        };
        responses: {
            /** `image_url` is returned for both `image_file` and `image_url`. */
            200: {
                schema: {
                    /** An object containing a publicly accessible image URL, or a form post that contains an image file. */
                    data?: {
                        /** A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
                        image_url?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** Image was not valid. This is the result of a missing `image_file` field or of an incorrect file type. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** Returns for an `image_file` larger than 1 MB. */
            500: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a list of product *Variant Options*. Optional parameters can be passed in. */
    getOptions: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productOption_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a *Variant Option*.
     *
     * **Required Fields**
     * * display_name
     * * type
     * * option_values
     *
     * **Read-Only Fields**
     * * id
     *
     * **Notes**
     *
     * * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
     * * There are several examples listed below that create options, but the SKU’s are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
     * * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
     * * If more than one variant needs to be created use the [Create a Product](/api-reference/catalog/catalog-api/products/createproduct) endpoint.
     */
    createOption: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                Option: {
                    /** The unique numerical ID of the option, increments sequentially. */
                    id?: number;
                    /** The unique numerical ID of the product to which the option belongs. */
                    product_id?: number;
                    /** The name of the option shown on the storefront. */
                    display_name?: string;
                    /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
                    type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                    /** The values for option config can vary based on the Modifier created. */
                    config?: {
                        /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                        default_value?: string;
                        /** (checkbox) Flag for setting the checkbox to be checked by default. */
                        checked_by_default?: boolean;
                        /** (checkbox) Label displayed for the checkbox option. */
                        checkbox_label?: string;
                        /** (date) Flag to limit the dates allowed to be entered on a date option. */
                        date_limited?: boolean;
                        /** (date) The type of limit that is allowed to be entered on a date option. */
                        date_limit_mode?: 'earliest' | 'range' | 'latest';
                        /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                        date_earliest_value?: string;
                        /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                        date_latest_value?: string;
                        /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                        file_types_mode?: 'specific' | 'all';
                        /**
                         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *   `other` - Allows file types defined in the `file_types_other` array.
                         */
                        file_types_supported?: string[];
                        /** (file) A list of other file types allowed with the file upload option. */
                        file_types_other?: string[];
                        /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                        file_max_size?: number;
                        /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                        text_characters_limited?: boolean;
                        /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                        text_min_length?: number;
                        /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                        text_max_length?: number;
                        /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                        text_lines_limited?: boolean;
                        /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                        text_max_lines?: number;
                        /** (numbers_only_text) Flag to limit the value of a number option. */
                        number_limited?: boolean;
                        /** (numbers_only_text) The type of limit on values entered for a number option. */
                        number_limit_mode?: 'lowest' | 'highest' | 'range';
                        /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                        number_lowest_value?: number;
                        /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                        number_highest_value?: number;
                        /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                        number_integers_only?: boolean;
                        /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                        product_list_adjusts_inventory?: boolean;
                        /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                        product_list_adjusts_pricing?: boolean;
                        /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                        product_list_shipping_calc?: 'none' | 'weight' | 'package';
                    };
                    /** Order in which the option is displayed on the storefront. */
                    sort_order?: number;
                    option_values?: ({
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    })[];
                    /** Publicly available image url */
                    image_url?: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: responses['OptionResponse'];
            /** Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** Option was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Variant Option*. Optional parameters can be passed in. */
    getOptionById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productOption_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Variant Option*.
     *
     * **Read-Only Fields**
     * * id
     */
    updateOption: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
            };
            body: {
                option: {
                    /** The unique numerical ID of the option, increments sequentially. */
                    id?: number;
                    /** The unique numerical ID of the product to which the option belongs. */
                    product_id?: number;
                    /** The name of the option shown on the storefront. */
                    display_name?: string;
                    /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
                    type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                    /** The values for option config can vary based on the Modifier created. */
                    config?: {
                        /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                        default_value?: string;
                        /** (checkbox) Flag for setting the checkbox to be checked by default. */
                        checked_by_default?: boolean;
                        /** (checkbox) Label displayed for the checkbox option. */
                        checkbox_label?: string;
                        /** (date) Flag to limit the dates allowed to be entered on a date option. */
                        date_limited?: boolean;
                        /** (date) The type of limit that is allowed to be entered on a date option. */
                        date_limit_mode?: 'earliest' | 'range' | 'latest';
                        /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                        date_earliest_value?: string;
                        /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                        date_latest_value?: string;
                        /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                        file_types_mode?: 'specific' | 'all';
                        /**
                         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *   `other` - Allows file types defined in the `file_types_other` array.
                         */
                        file_types_supported?: string[];
                        /** (file) A list of other file types allowed with the file upload option. */
                        file_types_other?: string[];
                        /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                        file_max_size?: number;
                        /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                        text_characters_limited?: boolean;
                        /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                        text_min_length?: number;
                        /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                        text_max_length?: number;
                        /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                        text_lines_limited?: boolean;
                        /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                        text_max_lines?: number;
                        /** (numbers_only_text) Flag to limit the value of a number option. */
                        number_limited?: boolean;
                        /** (numbers_only_text) The type of limit on values entered for a number option. */
                        number_limit_mode?: 'lowest' | 'highest' | 'range';
                        /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                        number_lowest_value?: number;
                        /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                        number_highest_value?: number;
                        /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                        number_integers_only?: boolean;
                        /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                        product_list_adjusts_inventory?: boolean;
                        /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                        product_list_adjusts_pricing?: boolean;
                        /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                        product_list_shipping_calc?: 'none' | 'weight' | 'package';
                    };
                    /** Order in which the option is displayed on the storefront. */
                    sort_order?: number;
                    option_values?: ({
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    })[];
                    /** Publicly available image url */
                    image_url?: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        /** The unique numerical ID of the option, increments sequentially. */
                        id?: number;
                        /** The unique numerical ID of the product to which the option belongs. */
                        product_id?: number;
                        /** The name of the option shown on the storefront. */
                        display_name?: string;
                        /** The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
                        type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                        /** The values for option config can vary based on the Modifier created. */
                        config?: {
                            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                            default_value?: string;
                            /** (checkbox) Flag for setting the checkbox to be checked by default. */
                            checked_by_default?: boolean;
                            /** (checkbox) Label displayed for the checkbox option. */
                            checkbox_label?: string;
                            /** (date) Flag to limit the dates allowed to be entered on a date option. */
                            date_limited?: boolean;
                            /** (date) The type of limit that is allowed to be entered on a date option. */
                            date_limit_mode?: 'earliest' | 'range' | 'latest';
                            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                            date_earliest_value?: string;
                            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                            date_latest_value?: string;
                            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                            file_types_mode?: 'specific' | 'all';
                            /**
                             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                             *   `other` - Allows file types defined in the `file_types_other` array.
                             */
                            file_types_supported?: string[];
                            /** (file) A list of other file types allowed with the file upload option. */
                            file_types_other?: string[];
                            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                            file_max_size?: number;
                            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                            text_characters_limited?: boolean;
                            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                            text_min_length?: number;
                            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                            text_max_length?: number;
                            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                            text_lines_limited?: boolean;
                            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                            text_max_lines?: number;
                            /** (numbers_only_text) Flag to limit the value of a number option. */
                            number_limited?: boolean;
                            /** (numbers_only_text) The type of limit on values entered for a number option. */
                            number_limit_mode?: 'lowest' | 'highest' | 'range';
                            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                            number_lowest_value?: number;
                            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                            number_highest_value?: number;
                            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                            number_integers_only?: boolean;
                            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                            product_list_adjusts_inventory?: boolean;
                            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                            product_list_adjusts_pricing?: boolean;
                            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                            product_list_shipping_calc?: 'none' | 'weight' | 'package';
                        };
                        /** Order in which the option is displayed on the storefront. */
                        sort_order?: number;
                        option_values?: ({
                            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                            is_default?: boolean;
                            /** The text display identifying the value on the storefront. Required in a /POST. */
                            label: string;
                            /** The order in which the value will be displayed on the product page. Required in a /POST. */
                            sort_order: number;
                            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                            value_data?: {
                                [key: string]: any;
                            };
                        } & {
                            /** The unique numeric ID of the value; increments sequentially. */
                            id?: number;
                        })[];
                        /** Publicly available image url */
                        image_url?: string;
                    } & {
                        /** The unique option name, auto-generated from the display name, a timestamp, and the product ID. */
                        name?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `Option` was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Option` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Variant Option*. */
    deleteOptionById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of all *Variant Option Values*. Optional parameters can be passed in. */
    getOptionValues: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: parameters['PageParam'];
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: parameters['LimitParam'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: ({
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    })[];
                    meta?: definitions['metaCollection_Full'];
                };
            };
        };
    };
    /**
     * Creates a *Variant Option Value*.
     *
     * **Required Fields**
     * * label
     * * sort_order
     *
     * **Read-Only Fields**
     * * id
     */
    createOptionValue: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
            };
            body: {
                OptionValue: {
                    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /** The text display identifying the value on the storefront. Required in a /POST. */
                    label: string;
                    /** The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: any;
                    };
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Variant Option Value*. Optional parameters can be passed in. */
    getOptionValueById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Variant Option Value*.
     *
     * **Read-Only Fields**
     * * id
     */
    updateOptionValue: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
            body: {
                /** A BigCommerce `OptionValue` object. */
                OptionValue: {
                    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /** The text display identifying the value on the storefront. Required in a /POST. */
                    label: string;
                    /** The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: any;
                    };
                } & {
                    /** The unique numeric ID of the value; increments sequentially. */
                    id?: number;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Variant Option Value*. */
    deleteOptionValueById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Option`. */
                option_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of all *Product Modifiers*. Optional parameters can be passed in. */
    getModifiers: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productModifier_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
        };
    };
    /**
     * Creates a *Product Modifier*.
     *
     * **Required Fields**
     * * `required`
     * * `display_name`
     * * `type`
     *
     * **Read-Only Fields**
     * * `id`
     */
    createModifier: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                Modifier: {
                    /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                    type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                    /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
                    required: boolean;
                    /** The order the modifiers display on the product detail page. */
                    sort_order?: number;
                    /** The values for option config can vary based on the Modifier created. */
                    config?: {
                        /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                        default_value?: string;
                        /** (checkbox) Flag for setting the checkbox to be checked by default. */
                        checked_by_default?: boolean;
                        /** (checkbox) Label displayed for the checkbox option. */
                        checkbox_label?: string;
                        /** (date) Flag to limit the dates allowed to be entered on a date option. */
                        date_limited?: boolean;
                        /** (date) The type of limit that is allowed to be entered on a date option. */
                        date_limit_mode?: 'earliest' | 'range' | 'latest';
                        /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                        date_earliest_value?: string;
                        /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                        date_latest_value?: string;
                        /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                        file_types_mode?: 'specific' | 'all';
                        /**
                         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *   `other` - Allows file types defined in the `file_types_other` array.
                         */
                        file_types_supported?: string[];
                        /** (file) A list of other file types allowed with the file upload option. */
                        file_types_other?: string[];
                        /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                        file_max_size?: number;
                        /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                        text_characters_limited?: boolean;
                        /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                        text_min_length?: number;
                        /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                        text_max_length?: number;
                        /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                        text_lines_limited?: boolean;
                        /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                        text_max_lines?: number;
                        /** (numbers_only_text) Flag to limit the value of a number option. */
                        number_limited?: boolean;
                        /** (numbers_only_text) The type of limit on values entered for a number option. */
                        number_limit_mode?: 'lowest' | 'highest' | 'range';
                        /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                        number_lowest_value?: number;
                        /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                        number_highest_value?: number;
                        /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                        number_integers_only?: boolean;
                        /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                        product_list_adjusts_inventory?: boolean;
                        /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                        product_list_adjusts_pricing?: boolean;
                        /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                        product_list_shipping_calc?: 'none' | 'weight' | 'package';
                    };
                    option_values?: (({
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        adjusters?: {
                            /** Adjuster for Complex Rules. */
                            price?: {
                                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster_value?: number;
                            };
                            /** Adjuster for Complex Rules. */
                            weight?: {
                                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster_value?: number;
                            };
                            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                            image_url?: string;
                            purchasing_disabled?: {
                                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                status?: boolean;
                                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                                message?: string;
                            };
                        };
                    }) & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    })[];
                } & {
                    /** The name of the option shown on the storefront. */
                    display_name: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Product Modifier */
                    data?: {
                        /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                        type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                        /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
                        required: boolean;
                        /** The order the modifiers display on the product detail page. */
                        sort_order?: number;
                        /** The values for option config can vary based on the Modifier created. */
                        config?: {
                            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                            default_value?: string;
                            /** (checkbox) Flag for setting the checkbox to be checked by default. */
                            checked_by_default?: boolean;
                            /** (checkbox) Label displayed for the checkbox option. */
                            checkbox_label?: string;
                            /** (date) Flag to limit the dates allowed to be entered on a date option. */
                            date_limited?: boolean;
                            /** (date) The type of limit that is allowed to be entered on a date option. */
                            date_limit_mode?: 'earliest' | 'range' | 'latest';
                            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                            date_earliest_value?: string;
                            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                            date_latest_value?: string;
                            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                            file_types_mode?: 'specific' | 'all';
                            /**
                             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                             *   `other` - Allows file types defined in the `file_types_other` array.
                             */
                            file_types_supported?: string[];
                            /** (file) A list of other file types allowed with the file upload option. */
                            file_types_other?: string[];
                            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                            file_max_size?: number;
                            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                            text_characters_limited?: boolean;
                            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                            text_min_length?: number;
                            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                            text_max_length?: number;
                            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                            text_lines_limited?: boolean;
                            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                            text_max_lines?: number;
                            /** (numbers_only_text) Flag to limit the value of a number option. */
                            number_limited?: boolean;
                            /** (numbers_only_text) The type of limit on values entered for a number option. */
                            number_limit_mode?: 'lowest' | 'highest' | 'range';
                            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                            number_lowest_value?: number;
                            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                            number_highest_value?: number;
                            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                            number_integers_only?: boolean;
                            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                            product_list_adjusts_inventory?: boolean;
                            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                            product_list_adjusts_pricing?: boolean;
                            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                            product_list_shipping_calc?: 'none' | 'weight' | 'package';
                        };
                        option_values?: (({
                            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                            is_default?: boolean;
                            /** The text display identifying the value on the storefront. Required in a /POST. */
                            label: string;
                            /** The order in which the value will be displayed on the product page. Required in a /POST. */
                            sort_order: number;
                            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                            value_data?: {
                                [key: string]: any;
                            };
                        } & {
                            adjusters?: {
                                /** Adjuster for Complex Rules. */
                                price?: {
                                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster?: 'relative' | 'percentage';
                                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster_value?: number;
                                };
                                /** Adjuster for Complex Rules. */
                                weight?: {
                                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster?: 'relative' | 'percentage';
                                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster_value?: number;
                                };
                                /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                                image_url?: string;
                                purchasing_disabled?: {
                                    /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                    status?: boolean;
                                    /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                                    message?: string;
                                };
                            };
                        }) & {
                            /** The unique numeric ID of the value; increments sequentially. */
                            id?: number;
                        })[];
                    } & {
                        /** The unique numeric ID of the modifier; increments sequentially. */
                        id?: number;
                        /** The unique numeric ID of the product to which the option belongs. */
                        product_id?: number;
                        /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
                        name?: string;
                        /** The name of the option shown on the storefront. */
                        display_name?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `Modifier` was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Product Modifier*. Optional parameters can be passed in. */
    getModifierById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productModifier_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Updates a *Product Modifier*. */
    updateModifier: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
            body: {
                modifier: {
                    /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                    type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                    /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
                    required: boolean;
                    /** The order the modifiers display on the product detail page. */
                    sort_order?: number;
                    /** The values for option config can vary based on the Modifier created. */
                    config?: {
                        /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                        default_value?: string;
                        /** (checkbox) Flag for setting the checkbox to be checked by default. */
                        checked_by_default?: boolean;
                        /** (checkbox) Label displayed for the checkbox option. */
                        checkbox_label?: string;
                        /** (date) Flag to limit the dates allowed to be entered on a date option. */
                        date_limited?: boolean;
                        /** (date) The type of limit that is allowed to be entered on a date option. */
                        date_limit_mode?: 'earliest' | 'range' | 'latest';
                        /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                        date_earliest_value?: string;
                        /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                        date_latest_value?: string;
                        /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                        file_types_mode?: 'specific' | 'all';
                        /**
                         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *   `other` - Allows file types defined in the `file_types_other` array.
                         */
                        file_types_supported?: string[];
                        /** (file) A list of other file types allowed with the file upload option. */
                        file_types_other?: string[];
                        /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                        file_max_size?: number;
                        /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                        text_characters_limited?: boolean;
                        /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                        text_min_length?: number;
                        /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                        text_max_length?: number;
                        /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                        text_lines_limited?: boolean;
                        /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                        text_max_lines?: number;
                        /** (numbers_only_text) Flag to limit the value of a number option. */
                        number_limited?: boolean;
                        /** (numbers_only_text) The type of limit on values entered for a number option. */
                        number_limit_mode?: 'lowest' | 'highest' | 'range';
                        /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                        number_lowest_value?: number;
                        /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                        number_highest_value?: number;
                        /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                        number_integers_only?: boolean;
                        /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                        product_list_adjusts_inventory?: boolean;
                        /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                        product_list_adjusts_pricing?: boolean;
                        /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                        product_list_shipping_calc?: 'none' | 'weight' | 'package';
                    };
                    option_values?: (({
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        adjusters?: {
                            /** Adjuster for Complex Rules. */
                            price?: {
                                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster_value?: number;
                            };
                            /** Adjuster for Complex Rules. */
                            weight?: {
                                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster_value?: number;
                            };
                            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                            image_url?: string;
                            purchasing_disabled?: {
                                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                status?: boolean;
                                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                                message?: string;
                            };
                        };
                    }) & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    })[];
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Product Modifier */
                    data?: {
                        /** BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                        type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                        /** Whether or not this modifer is required or not at checkout. Required in a /POST. */
                        required: boolean;
                        /** The order the modifiers display on the product detail page. */
                        sort_order?: number;
                        /** The values for option config can vary based on the Modifier created. */
                        config?: {
                            /** (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                            default_value?: string;
                            /** (checkbox) Flag for setting the checkbox to be checked by default. */
                            checked_by_default?: boolean;
                            /** (checkbox) Label displayed for the checkbox option. */
                            checkbox_label?: string;
                            /** (date) Flag to limit the dates allowed to be entered on a date option. */
                            date_limited?: boolean;
                            /** (date) The type of limit that is allowed to be entered on a date option. */
                            date_limit_mode?: 'earliest' | 'range' | 'latest';
                            /** (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                            date_earliest_value?: string;
                            /** (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string. */
                            date_latest_value?: string;
                            /** (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types. */
                            file_types_mode?: 'specific' | 'all';
                            /**
                             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                             *   `other` - Allows file types defined in the `file_types_other` array.
                             */
                            file_types_supported?: string[];
                            /** (file) A list of other file types allowed with the file upload option. */
                            file_types_other?: string[];
                            /** (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server. */
                            file_max_size?: number;
                            /** (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                            text_characters_limited?: boolean;
                            /** (text, multi_line_text) The minimum length allowed for a text or multi-line text option. */
                            text_min_length?: number;
                            /** (text, multi_line_text) The maximum length allowed for a text or multi line text option. */
                            text_max_length?: number;
                            /** (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input. */
                            text_lines_limited?: boolean;
                            /** (multi_line_text) The maximum number of lines allowed on a multi-line text input. */
                            text_max_lines?: number;
                            /** (numbers_only_text) Flag to limit the value of a number option. */
                            number_limited?: boolean;
                            /** (numbers_only_text) The type of limit on values entered for a number option. */
                            number_limit_mode?: 'lowest' | 'highest' | 'range';
                            /** (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true. */
                            number_lowest_value?: number;
                            /** (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                            number_highest_value?: number;
                            /** (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                            number_integers_only?: boolean;
                            /** (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                            product_list_adjusts_inventory?: boolean;
                            /** (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                            product_list_adjusts_pricing?: boolean;
                            /** (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions. */
                            product_list_shipping_calc?: 'none' | 'weight' | 'package';
                        };
                        option_values?: (({
                            /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                            is_default?: boolean;
                            /** The text display identifying the value on the storefront. Required in a /POST. */
                            label: string;
                            /** The order in which the value will be displayed on the product page. Required in a /POST. */
                            sort_order: number;
                            /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                            value_data?: {
                                [key: string]: any;
                            };
                        } & {
                            adjusters?: {
                                /** Adjuster for Complex Rules. */
                                price?: {
                                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster?: 'relative' | 'percentage';
                                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster_value?: number;
                                };
                                /** Adjuster for Complex Rules. */
                                weight?: {
                                    /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster?: 'relative' | 'percentage';
                                    /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster_value?: number;
                                };
                                /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                                image_url?: string;
                                purchasing_disabled?: {
                                    /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                    status?: boolean;
                                    /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                                    message?: string;
                                };
                            };
                        }) & {
                            /** The unique numeric ID of the value; increments sequentially. */
                            id?: number;
                        })[];
                    } & {
                        /** The unique numeric ID of the modifier; increments sequentially. */
                        id?: number;
                        /** The unique numeric ID of the product to which the option belongs. */
                        product_id?: number;
                        /** The unique option name. Auto-generated from the display name, a timestamp, and the product ID. */
                        name?: string;
                        /** The name of the option shown on the storefront. */
                        display_name?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `Modifier` was in conflict with another modifier or option. This is the result of duplicate unique fields, such as `name`. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Product Modifier*. */
    deleteModifierById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of all product *Modifier Values*. Optional parameters can be passed in. */
    getModifierValues: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: parameters['PageParam'];
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: parameters['LimitParam'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productModifierOptionValue_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
        };
    };
    /**
     * Creates a *Modifier Value*.
     *
     * **Required Fields**
     * * label
     * * sort_order
     *
     * **Read-Only Fields**
     * * id
     */
    createModifierValue: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
            body: {
                ModifierValue: {
                    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /** The text display identifying the value on the storefront. Required in a /POST. */
                    label: string;
                    /** The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: any;
                    };
                } & {
                    adjusters?: {
                        /** Adjuster for Complex Rules. */
                        price?: {
                            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: 'relative' | 'percentage';
                            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster_value?: number;
                        };
                        /** Adjuster for Complex Rules. */
                        weight?: {
                            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: 'relative' | 'percentage';
                            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster_value?: number;
                        };
                        /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                        image_url?: string;
                        purchasing_disabled?: {
                            /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                            status?: boolean;
                            /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                            message?: string;
                        };
                    };
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Part of Modifier Value Response */
                    data?: ({
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        adjusters?: {
                            /** Adjuster for Complex Rules. */
                            price?: {
                                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster_value?: number;
                            };
                            /** Adjuster for Complex Rules. */
                            weight?: {
                                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster_value?: number;
                            };
                            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                            image_url?: string;
                            purchasing_disabled?: {
                                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                status?: boolean;
                                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                                message?: string;
                            };
                        };
                    }) & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Modifier Value*. Optional parameters can be passed in. */
    getModifierValueById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productModifierOptionValue_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Modifier Value*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    updateModifierValue: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
            body: {
                ModifierValue: ({
                    /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /** The text display identifying the value on the storefront. Required in a /POST. */
                    label: string;
                    /** The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: any;
                    };
                } & {
                    adjusters?: {
                        /** Adjuster for Complex Rules. */
                        price?: {
                            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: 'relative' | 'percentage';
                            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster_value?: number;
                        };
                        /** Adjuster for Complex Rules. */
                        weight?: {
                            /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: 'relative' | 'percentage';
                            /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster_value?: number;
                        };
                        /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                        image_url?: string;
                        purchasing_disabled?: {
                            /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                            status?: boolean;
                            /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                            message?: string;
                        };
                    };
                }) & {
                    /** The unique numeric ID of the value; increments sequentially. */
                    id?: number;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Part of Modifier Value Response */
                    data?: ({
                        /** The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /** The text display identifying the value on the storefront. Required in a /POST. */
                        label: string;
                        /** The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: any;
                        };
                    } & {
                        adjusters?: {
                            /** Adjuster for Complex Rules. */
                            price?: {
                                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster_value?: number;
                            };
                            /** Adjuster for Complex Rules. */
                            weight?: {
                                /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster_value?: number;
                            };
                            /** The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file. */
                            image_url?: string;
                            purchasing_disabled?: {
                                /** Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                status?: boolean;
                                /** The message displayed on the storefront when the purchasing disabled status is `true`. */
                                message?: string;
                            };
                        };
                    }) & {
                        /** The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Modifier Value*. */
    deleteModifierValueById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /**
     * Creates a *Modifier Image*.
     *
     * The image will show on the storefront when the value is selected.
     *
     *  **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     */
    createModifierImage: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier`. */
                value_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
            formData: {
                image_file?: {
                    [key: string]: any;
                };
            };
        };
        responses: {
            200: {
                schema: {
                    /** An object containing a publicly accessible image URL, or a form post that contains an image file. */
                    data?: {
                        /** A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
                        image_url?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** Modifier image was not valid. This is the result of missing `image_file` fields, or of a non-URL value for the `image_file` field. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /**
     * Deletes a *Modifier Image*.
     *
     * Deletes the image that was set to show when the modifier value is selected.
     */
    deleteModifierImage: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier`. */
                value_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of all product *Complex Rules*. Optional parameters may be passed in. */
    getComplexRules: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: parameters['PageParam'];
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: parameters['LimitParam'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['complexRule_Base'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
        };
    };
    /**
     * Creates a product *Complex Rule*.
     *
     * **Required Fields**
     * - modifier_id
     * - modifier_value_id
     * - modifier_value_id
     * - variant_id
     *
     * **Read-Only Fields**
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    createComplexRule: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                ComplexRule: {
                    /**
                     * The unique numeric ID of the rule; increments sequentially.
                     * Read-Only
                     */
                    id?: number;
                    /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
                    product_id?: number;
                    /** The priority to give this rule when making adjustments to the product properties. */
                    sort_order?: number;
                    /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
                    enabled?: boolean;
                    /** Flag for determining whether other rules should not be applied after this rule has been applied. */
                    stop?: boolean;
                    /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
                    purchasing_disabled?: boolean;
                    /** Message displayed on the storefront when a rule disables the purchasing of a product. */
                    purchasing_disabled_message?: string;
                    /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
                    purchasing_hidden?: boolean;
                    /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
                    image_url?: string;
                    /** Adjuster for Complex Rules. */
                    price_adjuster?: {
                        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster?: 'relative' | 'percentage';
                        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster_value?: number;
                    };
                    /** Adjuster for Complex Rules. */
                    weight_adjuster?: {
                        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster?: 'relative' | 'percentage';
                        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster_value?: number;
                    };
                    conditions?: {
                        /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
                        id?: number;
                        /**
                         * The unique numeric ID of the rule with which the condition is associated.
                         * Read-Only
                         */
                        rule_id?: number;
                        /**
                         * The unique numeric ID of the modifier with which the rule condition is associated.
                         * Required in /POST.
                         */
                        modifier_id: number;
                        /**
                         * The unique numeric ID of the modifier value with which the rule condition is associated.
                         * Required in /POST.
                         */
                        modifier_value_id: number;
                        /**
                         * The unique numeric ID of the variant with which the rule condition is associated.
                         * Required in /POST.
                         */
                        variant_id: number;
                        /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                        combination_id?: number;
                    }[];
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: responses['ComplexRuleResponse'];
            /** The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Complex Rule*. Optional parameters can be passed in. */
    getComplexRuleById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `ComplexRule`. */
                complex_rule_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: responses['ComplexRuleResponse'];
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Complex Rule*.
     *
     * **Required Fields**:
     * - none
     *
     * **Read-Only Fields**:
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    updateComplexRule: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `ComplexRule`. */
                complex_rule_id: number;
            };
            body: {
                ComplexRule: {
                    /**
                     * The unique numeric ID of the rule; increments sequentially.
                     * Read-Only
                     */
                    id?: number;
                    /** The unique numeric ID of the product with which the rule is associated; increments sequentially. */
                    product_id?: number;
                    /** The priority to give this rule when making adjustments to the product properties. */
                    sort_order?: number;
                    /** Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty. */
                    enabled?: boolean;
                    /** Flag for determining whether other rules should not be applied after this rule has been applied. */
                    stop?: boolean;
                    /** Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
                    purchasing_disabled?: boolean;
                    /** Message displayed on the storefront when a rule disables the purchasing of a product. */
                    purchasing_disabled_message?: string;
                    /** Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
                    purchasing_hidden?: boolean;
                    /** The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file. */
                    image_url?: string;
                    /** Adjuster for Complex Rules. */
                    price_adjuster?: {
                        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster?: 'relative' | 'percentage';
                        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster_value?: number;
                    };
                    /** Adjuster for Complex Rules. */
                    weight_adjuster?: {
                        /** The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster?: 'relative' | 'percentage';
                        /** The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                        adjuster_value?: number;
                    };
                    conditions?: {
                        /** The unique numeric ID of the rule condition; increments sequentially. Read-Only */
                        id?: number;
                        /**
                         * The unique numeric ID of the rule with which the condition is associated.
                         * Read-Only
                         */
                        rule_id?: number;
                        /**
                         * The unique numeric ID of the modifier with which the rule condition is associated.
                         * Required in /POST.
                         */
                        modifier_id: number;
                        /**
                         * The unique numeric ID of the modifier value with which the rule condition is associated.
                         * Required in /POST.
                         */
                        modifier_value_id: number;
                        /**
                         * The unique numeric ID of the variant with which the rule condition is associated.
                         * Required in /POST.
                         */
                        variant_id: number;
                        /** (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                        combination_id?: number;
                    }[];
                };
            };
        };
        responses: {
            200: responses['ComplexRuleResponse'];
            /** The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a product *Complex Rule*. */
    deleteComplexRuleById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `ComplexRule`. */
                complex_rule_id: number;
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of product *Custom Fields*. Optional parameters can be passed in. */
    getCustomFields: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        /**
                         * The unique numeric ID of the custom field; increments sequentially.
                         * Read-Only
                         */
                        id?: number;
                        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                        name: string;
                        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                        value: string;
                    }[];
                    meta?: definitions['metaCollection_Full'];
                };
            };
        };
    };
    /**
     * Creates a *Custom Field*.
     *
     * **Required Fields:**
     * - name
     * - value
     *
     * **Read-Only:**
     * - id
     */
    createCustomField: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                CustomField: {
                    /**
                     * The unique numeric ID of the custom field; increments sequentially.
                     * Read-Only
                     */
                    id?: number;
                    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                    name: string;
                    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                    value: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date. */
                    data?: {
                        /**
                         * The unique numeric ID of the custom field; increments sequentially.
                         * Read-Only
                         */
                        id?: number;
                        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                        name: string;
                        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                        value: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The parent resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** The `CustomField` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Custom Field*. Optional parameters can be passed in. */
    getCustomFieldById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `CustomField`. */
                custom_field_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['productCustomField_Base'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Custom Field*.
     *
     * **Required Fields**
     * - none
     *
     * **Read-Only**
     * - id
     */
    updateCustomField: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `CustomField`. */
                custom_field_id: number;
            };
            body: {
                CustomField: {
                    /**
                     * The unique numeric ID of the custom field; increments sequentially.
                     * Read-Only
                     */
                    id?: number;
                    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                    name: string;
                    /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                    value: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date. */
                    data?: {
                        /**
                         * The unique numeric ID of the custom field; increments sequentially.
                         * Read-Only
                         */
                        id?: number;
                        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                        name: string;
                        /** The name of the field, shown on the storefront, orders, etc. Required for /POST */
                        value: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** The `CustomField` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a product *Custom Field*. */
    deleteCustomFieldById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `CustomField`. */
                custom_field_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Returns a list of *Bulk Pricing Rules*. Optional parameters can be passed in. */
    getBulkPricingRules: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['bulkPricingRule_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** The parent resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * - quantity_min
     * - quantity_max
     * - type
     * - amount
     *
     * **Read-Only Fields**
     * - id
     */
    createBulkPricingRule: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
            };
            body: {
                BulkPricingRule: definitions['bulkPricingRule_Full'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['bulkPricingRule_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The parent resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in. */
    getBulkPricingRuleById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `BulkPricingRule`. */
                bulk_pricing_rule_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['bulkPricingRule_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource or parent resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     */
    updateBulkPricingRule: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `BulkPricingRule`. */
                bulk_pricing_rule_id: number;
            };
            body: {
                BulkPricingRule: definitions['bulkPricingRule_Full'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Common BulkPricingRule properties */
                    data?: {
                        /** Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                        id?: number;
                        /**
                         * The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
                         * Required in /POST.
                         */
                        quantity_min: number;
                        /**
                         * The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
                         * Required in /POST.
                         */
                        quantity_max: number;
                        /**
                         * The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
                         * Required in /POST.
                         */
                        type: 'price' | 'percent' | 'fixed';
                        /**
                         * The discount can be a fixed dollar amount or a percentage. For a fixed dollar amount enter it as an integer and the response will return as an integer. For percentage enter the amount as the percentage divided by 100 using string format. For example 10% percent would be “.10”. The response will return as an integer.
                         * Required in /POST.
                         */
                        amount: number;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource or parent resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Bulk Pricing Rule*. */
    deleteBulkPricingRuleById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `BulkPricingRule`. */
                bulk_pricing_rule_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
            /** The resource or parent resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Returns a list of *Product Metafields*. Optional parameters can be passed in. */
    getProductMetafieldsByProductId: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Filter based on a metafield's key. */
                key?: string;
                /** Filter based on a metafield's namespace. */
                namespace?: string;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a *Product Metafield*.
     *
     * **Required Fields:**
     * * permission_set
     * * namespace
     * * key
     * * value
     *
     * **Read-Only Fields**
     * * id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    createProductMetafield: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                Metafield: definitions['metafield_Post'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Product Metafield*. Optional parameters can be passed in. */
    getProductMetafieldByProductId: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Product Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    updateProductMetafield: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                Metafield: definitions['metafield_Put'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Common Metafield properties. */
                    data?: {
                        /** Unique ID of the *Metafield*. Read-Only. */
                        id?: number;
                        /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
                        permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
                        /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
                        namespace: string;
                        /** The name of the field, for example: `location_id`, `color`. Required for POST. */
                        key: string;
                        /** The value of the field, for example: `1`, `blue`. Required for POST. */
                        value: string;
                        /** Description for the metafields. */
                        description?: string;
                        /** The type of resource with which the metafield is associated. */
                        resource_type?: 'category' | 'brand' | 'product' | 'variant';
                        /** The ID for the resource with which the metafield is associated. */
                        resource_id?: number;
                        /** Date and time of the metafield's creation. Read-Only. */
                        created_at?: string;
                        /** Date and time when the metafield was last updated. Read-Only. */
                        updated_at?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Deletes a *Product Metafield*. */
    deleteProductMetafieldById: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of all *Product Reviews*. Optional parameters can be passed in. */
    getProductReviews: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: ({
                        /**
                         * The title for the product review.
                         * Required in /POST.
                         */
                        title: string;
                        /** The text for the product review. */
                        text?: string;
                        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                        status?: string;
                        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                        rating?: number;
                        /** The email of the reviewer. Must be a valid email, or an empty string. */
                        email?: string;
                        /** The name of the reviewer. */
                        name?: string;
                        /** Date the product was reviewed. Required in /POST. */
                        date_reviewed: string;
                    } & {
                        /** The unique numeric ID of the product review; increments sequentially. */
                        id?: number;
                        /** The unique numeric identifier for the product with which the review is associated. */
                        product_id?: number;
                        /** Date the product review was created. */
                        date_created?: string;
                        /** Date the product review was modified. */
                        date_modified?: string;
                    })[];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** There are no reviews on this product. */
            204: never;
            /** The product ID does not exist. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a *Product Review*.
     *
     * **Required Fields**
     * - title
     * - date_reviewed
     *
     * **Read-Only Fields**
     * * id
     */
    createProductReview: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
            };
            body: {
                productReview: {
                    /**
                     * The title for the product review.
                     * Required in /POST.
                     */
                    title: string;
                    /** The text for the product review. */
                    text?: string;
                    /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                    status?: string;
                    /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                    rating?: number;
                    /** The email of the reviewer. Must be a valid email, or an empty string. */
                    email?: string;
                    /** The name of the reviewer. */
                    name?: string;
                    /** Date the product was reviewed. Required in /POST. */
                    date_reviewed: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** A product review model. */
                    data?: {
                        /**
                         * The title for the product review.
                         * Required in /POST.
                         */
                        title: string;
                        /** The text for the product review. */
                        text?: string;
                        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                        status?: string;
                        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                        rating?: number;
                        /** The email of the reviewer. Must be a valid email, or an empty string. */
                        email?: string;
                        /** The name of the reviewer. */
                        name?: string;
                        /** Date the product was reviewed. Required in /POST. */
                        date_reviewed: string;
                    } & {
                        /** The unique numeric ID of the product review; increments sequentially. */
                        id?: number;
                        /** The unique numeric identifier for the product with which the review is associated. */
                        product_id?: number;
                        /** Date the product review was created. */
                        date_created?: string;
                        /** Date the product review was modified. */
                        date_modified?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The product ID does not exist. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Returns a single *Product Review*. Optional parameters maybe passed in. */
    getProductReviewById: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `review` that is being operated on. */
                review_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** A product review model. */
                    data?: {
                        /**
                         * The title for the product review.
                         * Required in /POST.
                         */
                        title: string;
                        /** The text for the product review. */
                        text?: string;
                        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                        status?: string;
                        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                        rating?: number;
                        /** The email of the reviewer. Must be a valid email, or an empty string. */
                        email?: string;
                        /** The name of the reviewer. */
                        name?: string;
                        /** Date the product was reviewed. Required in /POST. */
                        date_reviewed: string;
                    } & {
                        /** The unique numeric ID of the product review; increments sequentially. */
                        id?: number;
                        /** The unique numeric identifier for the product with which the review is associated. */
                        product_id?: number;
                        /** Date the product review was created. */
                        date_created?: string;
                        /** Date the product review was modified. */
                        date_modified?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Product Review*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    updateProductReview: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `review` that is being operated on. */
                review_id: number;
            };
            body: {
                /** A BigCommerce `ProductReview` object. */
                productReview: {
                    /**
                     * The title for the product review.
                     * Required in /POST.
                     */
                    title: string;
                    /** The text for the product review. */
                    text?: string;
                    /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                    status?: string;
                    /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                    rating?: number;
                    /** The email of the reviewer. Must be a valid email, or an empty string. */
                    email?: string;
                    /** The name of the reviewer. */
                    name?: string;
                    /** Date the product was reviewed. Required in /POST. */
                    date_reviewed: string;
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** A product review model. */
                    data?: {
                        /**
                         * The title for the product review.
                         * Required in /POST.
                         */
                        title: string;
                        /** The text for the product review. */
                        text?: string;
                        /** The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                        status?: string;
                        /** The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                        rating?: number;
                        /** The email of the reviewer. Must be a valid email, or an empty string. */
                        email?: string;
                        /** The name of the reviewer. */
                        name?: string;
                        /** Date the product was reviewed. Required in /POST. */
                        date_reviewed: string;
                    } & {
                        /** The unique numeric ID of the product review; increments sequentially. */
                        id?: number;
                        /** The unique numeric identifier for the product with which the review is associated. */
                        product_id?: number;
                        /** Date the product review was created. */
                        date_created?: string;
                        /** Date the product review was modified. */
                        date_modified?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Deletes a *Product Review*. */
    deleteProductReview: {
        parameters: {
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: number;
                /** The ID of the `review` that is being operated on. */
                review_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of *Categories*. Optional filter parameters can be passed in. */
    getCategories: {
        parameters: {
            query: {
                /** Filter items by id. */
                id?: parameters['FilterIdParam'];
                'id:in'?: parameters['FilterIdIn'];
                'id:not_in'?: parameters['FilterIdNotIn'];
                'id:min'?: parameters['FilterIdMin'];
                'id:max'?: parameters['FilterIdMax'];
                'id:greater'?: parameters['FilterIdGreater'];
                'id:less'?: parameters['FilterIdLess'];
                /** Filter items by name. */
                name?: string;
                'name:like'?: string[];
                /** Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
                parent_id?: number;
                'parent_id:in'?: number[];
                'parent_id:min'?: number[];
                'parent_id:max'?: number[];
                'parent_id:greater'?: number[];
                'parent_id:less'?: number[];
                /** Filter items by page_title. */
                page_title?: string;
                'page_title:like'?: string[];
                /** Filter items by keywords. eg. new, towel, bath */
                keyword?: string;
                /** Filter items by if visible on the storefront. */
                is_visible?: boolean;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: responses['CategoryCollectionResponse'];
        };
    };
    /**
     * Creates a *Category*.
     *
     * **Required Fields**:
     * - parent_id:
     * 	- To create a child category, set the parent_id to the parent category.
     * 	- To create a top level category, set the parent_id to 0.
     * - name
     *
     * **Read-Only Fields**:
     * - id
     */
    createCategory: {
        parameters: {
            body: {
                category: {
                    /**
                     * Unique ID of the *Category*. Increments sequentially.
                     * Read-Only.
                     */
                    id?: number;
                    /**
                     * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
                     * Required in a POST if creating a child category.
                     */
                    parent_id: number;
                    /**
                     * The name displayed for the category. Name is unique with respect to the category's siblings.
                     * Required in a POST.
                     */
                    name: string;
                    /** The product description, which can include HTML formatting. */
                    description?: string;
                    /** Number of views the category has on the storefront. */
                    views?: number;
                    /** Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be. */
                    sort_order?: number;
                    /** Custom title for the category page. If not defined, the category name will be used as the meta title. */
                    page_title?: string;
                    /** A comma-separated list of keywords that can be used to locate the category when searching the store. */
                    search_keywords?: string;
                    /** Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
                    meta_keywords?: string[];
                    /** Custom meta description for the category page. If not defined, the store's default meta description will be used. */
                    meta_description?: string;
                    /** A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied. */
                    layout_file?: string;
                    /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
                    is_visible?: boolean;
                    /** Determines how the products are sorted on category page load. */
                    default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
                    /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. */
                    image_url?: string;
                    /** The custom URL for the category on the storefront. */
                    custom_url?: {
                        /** Category URL on the storefront. */
                        url?: string;
                        /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                        is_customized?: boolean;
                    };
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: responses['CategoryResponse'];
            /** The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /**
     * Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
     *
     * **Usage Notes**
     *
     * - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
     * - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` requst to the `/catalog/products/{product_id}` endpoint before deleting a category.
     */
    deleteCategories: {
        parameters: {
            query: {
                /** Filter items by id. */
                id?: number;
                'id:in'?: parameters['FilterIdIn'];
                'id:not_in'?: parameters['FilterIdNotIn'];
                'id:min'?: parameters['FilterIdMin'];
                'id:max'?: parameters['FilterIdMax'];
                'id:greater'?: parameters['FilterIdGreater'];
                'id:less'?: parameters['FilterIdLess'];
                /** Filter items by name. */
                name?: string;
                /** Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
                parent_id?: number;
                /** Filter items by page_title. */
                page_title?: string;
                /** Filter items by keywords. eg. new, towel, bath */
                keyword?: string;
                /** Filter items by if visible on the storefront. */
                is_visible?: boolean;
                'name:like'?: string[];
                'parent_id:in'?: number[];
                'parent_id:min'?: number[];
                'parent_id:max'?: number[];
                'parent_id:greater'?: number[];
                'parent_id:less'?: number[];
                'page_title:like'?: string[];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a single *Category*. Optional parameters can be passed in. */
    getCategoryById: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['category_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Category*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     */
    updateCategory: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            body: {
                category: {
                    /**
                     * Unique ID of the *Category*. Increments sequentially.
                     * Read-Only.
                     */
                    id?: number;
                    /**
                     * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
                     * Required in a POST if creating a child category.
                     */
                    parent_id: number;
                    /**
                     * The name displayed for the category. Name is unique with respect to the category's siblings.
                     * Required in a POST.
                     */
                    name: string;
                    /** The product description, which can include HTML formatting. */
                    description?: string;
                    /** Number of views the category has on the storefront. */
                    views?: number;
                    /** Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be. */
                    sort_order?: number;
                    /** Custom title for the category page. If not defined, the category name will be used as the meta title. */
                    page_title?: string;
                    /** A comma-separated list of keywords that can be used to locate the category when searching the store. */
                    search_keywords?: string;
                    /** Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
                    meta_keywords?: string[];
                    /** Custom meta description for the category page. If not defined, the store's default meta description will be used. */
                    meta_description?: string;
                    /** A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied. */
                    layout_file?: string;
                    /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
                    is_visible?: boolean;
                    /** Determines how the products are sorted on category page load. */
                    default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
                    /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. */
                    image_url?: string;
                    /** The custom URL for the category on the storefront. */
                    custom_url?: {
                        /** Category URL on the storefront. */
                        url?: string;
                        /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                        is_customized?: boolean;
                    };
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Common Category object properties. */
                    data?: {
                        /**
                         * Unique ID of the *Category*. Increments sequentially.
                         * Read-Only.
                         */
                        id?: number;
                        /**
                         * The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
                         * Required in a POST if creating a child category.
                         */
                        parent_id: number;
                        /**
                         * The name displayed for the category. Name is unique with respect to the category's siblings.
                         * Required in a POST.
                         */
                        name: string;
                        /** The product description, which can include HTML formatting. */
                        description?: string;
                        /** Number of views the category has on the storefront. */
                        views?: number;
                        /** Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be. */
                        sort_order?: number;
                        /** Custom title for the category page. If not defined, the category name will be used as the meta title. */
                        page_title?: string;
                        /** A comma-separated list of keywords that can be used to locate the category when searching the store. */
                        search_keywords?: string;
                        /** Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
                        meta_keywords?: string[];
                        /** Custom meta description for the category page. If not defined, the store's default meta description will be used. */
                        meta_description?: string;
                        /** A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied. */
                        layout_file?: string;
                        /** Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
                        is_visible?: boolean;
                        /** Determines how the products are sorted on category page load. */
                        default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
                        /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. */
                        image_url?: string;
                        /** The custom URL for the category on the storefront. */
                        custom_url?: {
                            /** Category URL on the storefront. */
                            url?: string;
                            /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                            is_customized?: boolean;
                        };
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Category*. */
    deleteCategoryById: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in. */
    getCategoryMetafieldsByCategoryId: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            query: {
                /** Filter items by id. */
                id?: parameters['FilterIdParam'];
                'id:in'?: parameters['FilterIdIn'];
                'id:not_in'?: parameters['FilterIdNotIn'];
                'id:min'?: parameters['FilterIdMin'];
                'id:max'?: parameters['FilterIdMax'];
                'id:greater'?: parameters['FilterIdGreater'];
                'id:less'?: parameters['FilterIdLess'];
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Filter based on a metafield's key. */
                key?: string;
                /** Filter based on a metafield's namespace. */
                namespace?: string;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a *Category Metafield*.
     *
     * **Required Fields:**
     * - permission_set
     * - namespace
     * - key
     * - value
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    createCategoryMetafield: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            body: {
                Metafield: definitions['metafield_Post'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Common Metafield properties. */
                    data?: {
                        /** Unique ID of the *Metafield*. Read-Only. */
                        id?: number;
                        /** Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
                        permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
                        /** Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST. */
                        namespace: string;
                        /** The name of the field, for example: `location_id`, `color`. Required for POST. */
                        key: string;
                        /** The value of the field, for example: `1`, `blue`. Required for POST. */
                        value: string;
                        /** Description for the metafields. */
                        description?: string;
                        /** The type of resource with which the metafield is associated. */
                        resource_type?: 'category' | 'brand' | 'product' | 'variant';
                        /** The ID for the resource with which the metafield is associated. */
                        resource_id?: number;
                        /** Date and time of the metafield's creation. Read-Only. */
                        created_at?: string;
                        /** Date and time when the metafield was last updated. Read-Only. */
                        updated_at?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate, unique key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a single *Category Metafield*. Optional parameters can be passed in. */
    getCategoryMetafieldByCategoryId: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Base'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Category Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    updateCategoryMetafield: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            body: {
                Metafield: definitions['metafield_Put'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Deletes a *Category Metafield*. */
    deleteCategoryMetafieldById: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /**
     * Create a *Category Image*.
     *
     *  **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     *
     * Only one image at a time can be created.
     * Limit image size to 1MB.
     * To update a *Category Image*, use the [PUT Categories](/api-reference/catalog/catalog-api/category/updatecategory) and an `image_url`.
     */
    createCategoryImage: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
            formData: {
                image_file?: {
                    [key: string]: any;
                };
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        image_url?: string;
                    };
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** Image was not valid. This is the result of a missing `image_file` field or an incorrect file type. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Cateogory Image*. */
    deleteCategoryImage: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API. */
    getCategoryTree: {
        parameters: {
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: definitions['categoriesTree_Resp'];
            };
        };
    };
    /** Returns a list of *Brands*. Optional filter parameters can be passed in. */
    getBrands: {
        parameters: {
            query: {
                /** Filter items by id. */
                id?: parameters['FilterIdParam'];
                'id:in'?: parameters['FilterIdIn'];
                'id:not_in'?: parameters['FilterIdNotIn'];
                'id:min'?: parameters['FilterIdMin'];
                'id:max'?: parameters['FilterIdMax'];
                'id:greater'?: parameters['FilterIdGreater'];
                'id:less'?: parameters['FilterIdLess'];
                /** Filter items by name. */
                name?: string;
                /** Filter items by page_title. */
                page_title?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['brand_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
        };
    };
    /**
     * Creates a *Brand*.
     *
     * **Required Fields**
     * - name
     *
     * **Read-Only Fields**
     * - id
     */
    createBrand: {
        parameters: {
            body: {
                Brand: {
                    /** Unique ID of the *Brand*. Read-Only. */
                    id?: number;
                    /**
                     * The name of the brand. Must be unique.
                     * Required in POST.
                     */
                    name: string;
                    /** The title shown in the browser while viewing the brand. */
                    page_title?: string;
                    /** Comma-separated list of meta keywords to include in the HTML. */
                    meta_keywords?: string[];
                    /** A meta description to include. */
                    meta_description?: string;
                    /** A comma-separated list of keywords that can be used to locate this brand. */
                    search_keywords?: string;
                    /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
                    image_url?: string;
                    /** The custom URL for the brand on the storefront. */
                    custom_url?: {
                        /** Brand URL on the storefront. */
                        url?: string;
                        /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                        is_customized?: boolean;
                    };
                };
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Common Brand properties. */
                    data?: {
                        /** Unique ID of the *Brand*. Read-Only. */
                        id?: number;
                        /**
                         * The name of the brand. Must be unique.
                         * Required in POST.
                         */
                        name: string;
                        /** The title shown in the browser while viewing the brand. */
                        page_title?: string;
                        /** Comma-separated list of meta keywords to include in the HTML. */
                        meta_keywords?: string[];
                        /** A meta description to include. */
                        meta_description?: string;
                        /** A comma-separated list of keywords that can be used to locate this brand. */
                        search_keywords?: string;
                        /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
                        image_url?: string;
                        /** The custom URL for the brand on the storefront. */
                        custom_url?: {
                            /** Brand URL on the storefront. */
                            url?: string;
                            /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                            is_customized?: boolean;
                        };
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** Brand was in conflict with another brand. This is the result of duplicate unique fields such as name. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** By default, it deletes all *Brand* objects. A filter should be added to avoid deleting all *Brand* objects in a store. */
    deleteBrands: {
        parameters: {
            query: {
                /** Filter items by name. */
                name?: string;
                /** Filter items by page_title. */
                page_title?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a single *Brand*. Optional filter parameters can be passed in. */
    getBrandById: {
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['brand_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Brand*.
     *
     * **Required Fields**
     * - None
     *
     * **Read-Only Fields**
     * - id
     *
     * To update a *Brand Image*, send a request with an `image_url`.
     */
    updateBrand: {
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            body: {
                brand: {
                    /** Unique ID of the *Brand*. Read-Only. */
                    id?: number;
                    /**
                     * The name of the brand. Must be unique.
                     * Required in POST.
                     */
                    name: string;
                    /** The title shown in the browser while viewing the brand. */
                    page_title?: string;
                    /** Comma-separated list of meta keywords to include in the HTML. */
                    meta_keywords?: string[];
                    /** A meta description to include. */
                    meta_description?: string;
                    /** A comma-separated list of keywords that can be used to locate this brand. */
                    search_keywords?: string;
                    /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
                    image_url?: string;
                    /** The custom URL for the brand on the storefront. */
                    custom_url?: {
                        /** Brand URL on the storefront. */
                        url?: string;
                        /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                        is_customized?: boolean;
                    };
                };
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Common Brand properties. */
                    data?: {
                        /** Unique ID of the *Brand*. Read-Only. */
                        id?: number;
                        /**
                         * The name of the brand. Must be unique.
                         * Required in POST.
                         */
                        name: string;
                        /** The title shown in the browser while viewing the brand. */
                        page_title?: string;
                        /** Comma-separated list of meta keywords to include in the HTML. */
                        meta_keywords?: string[];
                        /** A meta description to include. */
                        meta_description?: string;
                        /** A comma-separated list of keywords that can be used to locate this brand. */
                        search_keywords?: string;
                        /** Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field. */
                        image_url?: string;
                        /** The custom URL for the brand on the storefront. */
                        custom_url?: {
                            /** Brand URL on the storefront. */
                            url?: string;
                            /** Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                            is_customized?: boolean;
                        };
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** The `Brand` was in conflict with another product. This is the result of duplicate unique values, such as `name`. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Brand` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Brand*. */
    deleteBrandById: {
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of *Brand Metafields*. Optional filter parameters can be passed in. */
    getBrandMetafieldsByBrandId: {
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            query: {
                /** Filter items by id. */
                id?: parameters['FilterIdParam'];
                'id:in'?: parameters['FilterIdIn'];
                'id:not_in'?: parameters['FilterIdNotIn'];
                'id:min'?: parameters['FilterIdMin'];
                'id:max'?: parameters['FilterIdMax'];
                'id:greater'?: parameters['FilterIdGreater'];
                'id:less'?: parameters['FilterIdLess'];
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Filter based on a metafield's key. */
                key?: string;
                /** Filter based on a metafield's namespace. */
                namespace?: string;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'][];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Creates a *Brand Metafield*.
     *
     * **Required Fields**
     * - permission_set
     * - namespace
     * - key
     * - value
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    createBrandMetafield: {
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            body: {
                Metafield: definitions['metafield_Post'];
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Common Metafield properties. */
                    data?: {
                        [key: string]: any;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combination of the app's client id, namespace, key, resource_type, and resource_id. */
            409: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
            /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Returns a *Brand Metafield*. Optional filter parameters can be passed in. */
    getBrandMetafieldByBrandId: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /**
     * Updates a *Brand Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     * * The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    updateBrandMetafield: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            body: {
                Metafield: definitions['metafield_Put'];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: definitions['metafield_Full'];
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Deletes a *Brand Metafield*. */
    deleteBrandMetafieldById: {
        parameters: {
            path: {
                /** The ID of the `Metafield`. */
                metafield_id: number;
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            204: never;
        };
    };
    /**
     * Creates a *Brand Image*.
     *
     * **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     *
     * **Read-Only Fields**
     * - id
     *
     * Only one image at a time can be created. To update a *Brand Image*, use the [PUT Brands](/api-reference/catalog/catalog-api/brands/updatebrand) and an `image_url`.
     */
    createBrandImage: {
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
            formData: {
                image_file?: {
                    [key: string]: any;
                };
            };
        };
        responses: {
            200: {
                schema: {
                    data?: {
                        image_url?: string;
                    };
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
            /** Image was not valid. This is the result of a missing `image_file` field, or of an incorrect file type. See the response for more details. */
            422: {
                schema: {
                    /** The HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                } & {
                    errors?: {
                        additionalProperties?: string;
                    };
                };
            };
        };
    };
    /** Deletes a *Brand Image*. */
    deleteBrandImage: {
        parameters: {
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
            };
            header: {
                'Content-Type': string;
                Accept: string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of all variants in your catalog. Optional parameters can be passed in. */
    getVariants: {
        parameters: {
            query: {
                /** Filter items by id. */
                id?: number;
                /** Filter items by sku. */
                sku?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /**
                 * A comma-separated list of ids of Products whose prices were requested. For example:
                 * `?product_id=:id`
                 * `?product_id:in=77,80,81`
                 */
                product_id?: string;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: ({
                        /** The cost price of the variant. Not affected by Price List prices. */
                        cost_price?: number;
                        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
                        price?: number;
                        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
                        sale_price?: number;
                        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
                        retail_price?: number;
                        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
                        weight?: number;
                        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
                        width?: number;
                        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
                        height?: number;
                        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
                        depth?: number;
                        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
                        is_free_shipping?: boolean;
                        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
                        fixed_cost_shipping_price?: number;
                        /** If `true`, this variant will not be purchasable on the storefront. */
                        purchasing_disabled?: boolean;
                        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
                        purchasing_disabled_message?: string;
                        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
                        upc?: string;
                        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
                        inventory_level?: number;
                        /** When the variant hits this inventory level, it is considered low stock. */
                        inventory_warning_level?: number;
                        /** Identifies where in a warehouse the variant is located. */
                        bin_picking_number?: string;
                    } & {
                        id?: number;
                        product_id?: number;
                        sku?: string;
                        /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
                        sku_id?: number;
                        /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
                        option_values?: ({
                            /** The name of the option. */
                            option_display_name?: string;
                            /** The label of the option value. */
                            label?: string;
                        } & {
                            id?: number;
                            option_id?: number;
                        })[];
                        /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
                        calculated_price?: number;
                    })[];
                    meta?: definitions['metaCollection_Full'];
                };
            };
            /** The resource was not found. */
            404: {
                schema: {
                    /** 404 HTTP status code. */
                    status?: number;
                    /** The error title describing the particular error. */
                    title?: string;
                    type?: string;
                    instance?: string;
                };
            };
        };
    };
    /** Updates a batch of `variant` objects. At the time of writing, the limit is 50 variants. This limit is subject to change. */
    updateVariantsBatch: {
        parameters: {
            body: {
                body: ({
                    /** The cost price of the variant. Not affected by Price List prices. */
                    cost_price?: number;
                    /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
                    price?: number;
                    /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
                    sale_price?: number;
                    /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
                    retail_price?: number;
                    /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
                    weight?: number;
                    /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
                    width?: number;
                    /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
                    height?: number;
                    /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
                    depth?: number;
                    /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
                    is_free_shipping?: boolean;
                    /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
                    fixed_cost_shipping_price?: number;
                    /** If `true`, this variant will not be purchasable on the storefront. */
                    purchasing_disabled?: boolean;
                    /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
                    purchasing_disabled_message?: string;
                    /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
                    upc?: string;
                    /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
                    inventory_level?: number;
                    /** When the variant hits this inventory level, it is considered low stock. */
                    inventory_warning_level?: number;
                    /** Identifies where in a warehouse the variant is located. */
                    bin_picking_number?: string;
                } & {
                    id?: number;
                })[];
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    data?: ({
                        /** The cost price of the variant. Not affected by Price List prices. */
                        cost_price?: number;
                        /** This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price. */
                        price?: number;
                        /** This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price. */
                        sale_price?: number;
                        /** This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price. */
                        retail_price?: number;
                        /** This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight. */
                        weight?: number;
                        /** Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width. */
                        width?: number;
                        /** Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height. */
                        height?: number;
                        /** Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth. */
                        depth?: number;
                        /** Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
                        is_free_shipping?: boolean;
                        /** A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation. */
                        fixed_cost_shipping_price?: number;
                        /** If `true`, this variant will not be purchasable on the storefront. */
                        purchasing_disabled?: boolean;
                        /** If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
                        purchasing_disabled_message?: string;
                        /** The UPC code used in feeds for shopping comparison sites and external channel integrations. */
                        upc?: string;
                        /** Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`. */
                        inventory_level?: number;
                        /** When the variant hits this inventory level, it is considered low stock. */
                        inventory_warning_level?: number;
                        /** Identifies where in a warehouse the variant is located. */
                        bin_picking_number?: string;
                    } & {
                        id?: number;
                        product_id?: number;
                        sku?: string;
                        /** Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
                        sku_id?: number;
                        /** Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
                        option_values?: ({
                            /** The name of the option. */
                            option_display_name?: string;
                            /** The label of the option value. */
                            label?: string;
                        } & {
                            id?: number;
                            option_id?: number;
                        })[];
                        /** The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant. */
                        calculated_price?: number;
                    })[];
                    /** Data about the response, including pagination and collection totals. */
                    meta?: {
                        /** Data about the response, including pagination and collection totals. */
                        pagination?: {
                            /** Total number of items in the result set. */
                            total?: number;
                            /** Total number of items in the collection response. */
                            count?: number;
                            /** The amount of items returned in the collection per page, controlled by the limit parameter. */
                            per_page?: number;
                            /** The page you are currently on within the collection. */
                            current_page?: number;
                            /** The total number of pages in the collection. */
                            total_pages?: number;
                            /** Pagination links for the previous and next parts of the whole collection. */
                            links?: {
                                /** Link to the previous page returned in the response. */
                                previous?: string;
                                /** Link to the current page returned in the response. */
                                current?: string;
                                /** Link to the next page returned in the response. */
                                next?: string;
                            };
                        };
                    };
                };
            };
            413: unknown;
            /** This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                schema: {
                    batch_errors?: ({
                        /** The HTTP status code. */
                        status?: number;
                        /** The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    } & {
                        errors?: {
                            additionalProperties?: string;
                        };
                    })[];
                };
            };
        };
    };
    /**
     * Returns a lightweight inventory summary from the BigCommerce Catalog.
     *
     * The inventory summary includes:
     * * "inventory_count"
     * * "variant_count"
     * * "inventory_value"
     * * "highest_variant_price"
     * * "average_variant_price"
     * * "lowest_variant_price"
     * * "oldest_variant_date"
     * * "newest_variant_date"
     * * "primary_category_id"
     * * "primary_category_name"
     */
    getCatalogSummary: {
        parameters: {
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: {
                schema: {
                    /** Catalog Summary object describes a lightweight summary of the catalog. */
                    data?: {
                        /** A count of all inventory items in the catalog. */
                        inventory_count?: number;
                        /** Total value of store's inventory. */
                        inventory_value?: number;
                        /** ID of the category containing the most products. */
                        primary_category_id?: number;
                        /** Name of the category containing the most products. */
                        primary_category_name?: string;
                        /** Total number of variants */
                        variant_count?: number;
                        /** Highest priced variant */
                        highest_variant_price?: number;
                        /** Average price of all variants */
                        average_variant_price?: number;
                        /** Lowest priced variant in the store */
                        lowest_variant_price?: string;
                        oldest_variant_date?: string;
                        newest_variant_date?: string;
                    };
                    /** Empty meta object; may be used later. */
                    meta?: {
                        [key: string]: any;
                    };
                };
            };
        };
    };
    /**
     * Returns a list of products and their sort order for a specific category.
     *
     * **Usage Notes**
     * * Data pairs are displayed in ascending order based on products' `sort_order` values.
     * * `null` values are allowed for products without specified `sort_order` values.
     * * Products with `sort_order` value of `null` will be displayed after products with valid numerical values.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > This endpoint is in beta.
     *
     * </div>
     * </div>
     * </div>
     */
    getsortorders: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
        };
        responses: {
            200: responses['ProductSortOrderResponse'];
            404: responses['Error404Response'];
        };
    };
    /**
     * Updates *Sort Order* of products within a specific category.
     *
     * <div class="HubBlock--callout">
     * <div class="CalloutBlock--info">
     * <div class="HubBlock-content">
     *
     * > ### Note
     * > This endpoint is in beta.
     *
     * </div>
     * </div>
     * </div>
     */
    updatesortorder: {
        parameters: {
            path: {
                /** The ID of the `Category` to which the resource belongs. */
                category_id: number;
            };
            header: {
                Accept: string;
                'Content-Type': string;
            };
            body: {
                body?: definitions['productSortOrder'];
            };
        };
        responses: {
            200: responses['ProductSortOrderResponse'];
            404: responses['Error404Response'];
            422: responses['Error422Response'];
        };
    };
}

interface BigCommerceIntegrationParameters {
    storeHash?: string;
    token?: string;
}
declare type GetProductHandlerBody = {
    product_id: string;
};
declare type ProductResult = definitions['product_Full'];
declare type CategoryResult = {
    id: number;
    is_visible?: boolean;
    parent_id?: number;
    url?: string;
    name: string;
    children: CategoryResult[];
};
declare type BrandResult = {
    id: number;
    name: string;
};
declare type GetProductOptions = {
    include?: string[];
    include_fields?: (keyof ProductResult)[];
};
declare type GetProductsOptions = {
    keyword?: string;
    limit?: number;
    /**
     * @deprecated use `limit`
     */
    count?: number;
    categories?: string[];
    brand?: string;
    sort?: string;
    include?: string[];
    include_fields?: (keyof ProductResult)[];
    ids?: string[];
    sortOrder?: string;
};
declare type GetProductsResult = {
    products: ProductResult[];
};
declare type GetProductResult = {
    product: ProductResult;
};
declare type GetCategoriesResult = {
    categories: CategoryResult[] | undefined;
};
declare type GetBrandsResult = {
    brands: BrandResult[] | undefined;
};
interface ProductDynamicSelectorValue {
    count: number;
    categories: string[];
    brand: string;
    keyword: string;
    sort: string;
}

declare const createBigCommerceClient: ({ storeHash, token, }: {
    storeHash: string;
    token: string;
}) => BigCommerceClient;
declare type BigCommerceClient = {
    getProducts: (options: GetProductsOptions) => Promise<GetProductsResult>;
    getProduct: (id: string, options?: GetProductOptions) => Promise<GetProductResult>;
    getCategories: () => Promise<GetCategoriesResult>;
    getBrands: () => Promise<GetBrandsResult>;
};

declare type CreateBigCommerceProductOptions<TContext extends EnhancerContext = EnhancerContext> = {
    parameterName: string;
    parameter: ComponentParameter<string>;
    component: ComponentInstance;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
declare type CreateBigCommerceProductQueryOptions<TContext extends EnhancerContext = EnhancerContext> = {
    parameterName: string;
    parameter: ComponentParameter<GetProductsOptions | string[]>;
    component: ComponentInstance;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
declare type BigCommerceEnhancerResult = ProductResult | ProductResult[];
declare const CANVAS_BIGCOMMERCE_PARAMETER_TYPES: readonly string[];
declare function createBigCommerceEnhancer({ client, createProductOptions, createProductQueryOptions, limitPolicy, }: {
    client: BigCommerceClient;
    createProductOptions?: (options: CreateBigCommerceProductOptions) => GetProductOptions;
    createProductQueryOptions?: (options: CreateBigCommerceProductQueryOptions) => GetProductsOptions;
    limitPolicy?: LimitPolicy;
}): ComponentParameterEnhancer<string | GetProductsOptions | string[], BigCommerceEnhancerResult>;
declare function parameterIsBigCommerceProduct(parameter: ComponentParameter): parameter is ComponentParameter<string>;
declare function parameterIsBigCommerceProductQuery(parameter: ComponentParameter): parameter is ComponentParameter<GetProductsOptions>;
declare function parameterIsBigCommerceProductList(parameter: ComponentParameter): parameter is ComponentParameter<string[]>;

export { BigCommerceClient, BigCommerceEnhancerResult, BigCommerceIntegrationParameters, BrandResult, CANVAS_BIGCOMMERCE_PARAMETER_TYPES, CategoryResult, CreateBigCommerceProductOptions, CreateBigCommerceProductQueryOptions, GetBrandsResult, GetCategoriesResult, GetProductHandlerBody, GetProductOptions, GetProductResult, GetProductsOptions, GetProductsResult, ProductDynamicSelectorValue, ProductResult, createBigCommerceClient, createBigCommerceEnhancer, definitions, operations, parameterIsBigCommerceProduct, parameterIsBigCommerceProductList, parameterIsBigCommerceProductQuery, parameters, paths, responses };
