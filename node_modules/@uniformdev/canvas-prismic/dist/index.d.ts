import { QueryOptions } from '@prismicio/client/types/ResolvedApi';
import { Client } from '@prismicio/client/types/client';
import { ComponentParameter } from '@uniformdev/canvas/';
import { EnhancerContext, ComponentParameter as ComponentParameter$1, ComponentInstance, LimitPolicy, ComponentParameterEnhancer } from '@uniformdev/canvas';
import { Document } from '@prismicio/client/types/documents';

declare type PrismicQueryOptions = QueryOptions & Partial<{
    ref: string;
    page: number;
    pageSize: number;
    orderings: string[];
    lang: string;
    after: string;
    fetchlinks: string | string[];
    graphQuery: string;
}>;
declare type PrismicQuery = {
    expression: string;
    options?: PrismicQueryOptions;
};

declare type PrismicClient = Client;
interface AddClientArgs {
    /**
     * The Prismic source public ID that this client maps to in the composition data.
     * This is used to enable multiple Prismic projects as data sources.
     * If unspecified, the client will be the default source that is used when no source public ID
     * is in the data, or the source ID is 'default'.
     */
    source?: string;
    /** The Prismic client instance to use when fetching published data */
    client: PrismicClient;
}
declare class PrismicClientList {
    private _clients;
    constructor(clients?: AddClientArgs[] | AddClientArgs);
    addClient({ source, client }: AddClientArgs): void;
    getClient({ source, }: {
        source?: string;
    }): PrismicClient | undefined;
}

declare const CANVAS_PRISMIC_PARAMETER_TYPES: readonly string[];
declare type PrismicEntryParameterValue = {
    entryId: string;
    source: string;
} | null | undefined;
declare function parameterIsPrismicEntry(parameter: ComponentParameter<any>): parameter is ComponentParameter<PrismicEntryParameterValue>;
declare function isParameterValueDefined(value: PrismicEntryParameterValue): boolean;

declare type AddPrismicQueryOptions<TContext extends EnhancerContext = EnhancerContext> = {
    /** Canvas parameter name being queried for. Not defined if using batching. */
    parameterName?: string;
    /** Canvas parameter value being fetched. Not defined if using batching. */
    parameter?: ComponentParameter$1<PrismicEntryParameterValue>;
    /** Component containing the parameter being fetched. Not defined if using batching. */
    component?: Readonly<ComponentInstance>;
    /** The list of Prismic entry IDs to resolve */
    entryId: string;
    /** The default Prismic query */
    defaultQuery: Readonly<PrismicQuery>;
    /** The enhancer context provided to the enhance() function */
    context: TContext;
};
declare type AddPrismicBatchQueryOptions<TContext extends EnhancerContext = EnhancerContext> = Pick<AddPrismicQueryOptions<TContext>, 'component' | 'context' | 'parameter' | 'parameterName'> & {
    /** The list of Prismic entry IDs to resolve */
    entryIds: string[];
    /** The default Prismic query expression when using batching */
    defaultBatchQuery: Readonly<PrismicQuery>;
};
/** The default shape of the result value of the Prismic enhancer. Note that this can change if the query is altered. */
declare type PrismicEnhancerResult = Document | null;
declare type CreatePrismicEnhancerOptions = {
    /** A list of Prismic clients for use with multi-source-enabled Canvas projects. */
    clients: PrismicClientList;
    /** Creates the Prismic client's query params for specific parameters. */
    addEntryQueryOptions?: (options: AddPrismicQueryOptions) => PrismicQuery | undefined;
    addBatchQueryOptions?: (options: AddPrismicBatchQueryOptions) => PrismicQuery | undefined;
    useBatching?: boolean;
    limitPolicy?: LimitPolicy;
};
declare function createPrismicEnhancer({ clients, addEntryQueryOptions, addBatchQueryOptions, useBatching, limitPolicy, }: CreatePrismicEnhancerOptions): ComponentParameterEnhancer<PrismicEntryParameterValue, PrismicEnhancerResult>;

export { AddClientArgs, AddPrismicBatchQueryOptions, AddPrismicQueryOptions, CANVAS_PRISMIC_PARAMETER_TYPES, CreatePrismicEnhancerOptions, PrismicClient, PrismicClientList, PrismicEnhancerResult, PrismicEntryParameterValue, PrismicQuery, PrismicQueryOptions, createPrismicEnhancer, isParameterValueDefined, parameterIsPrismicEntry };
