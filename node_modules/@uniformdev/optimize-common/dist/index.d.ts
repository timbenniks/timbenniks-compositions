/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$2 {
    '/api/v1/manifest': {
        /**
         * Fetches the Intent Manifest for a given project.
         * If no manifest has ever been published, and an API key is used that has preview manifest permissions then the current preview manifest will be returned (in delivery format).
         */
        get: {
            parameters: {
                query: {
                    preview?: Partial<0 | 1> & Partial<boolean>;
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': components$1['schemas']['PreviewIntentManifest'] | components$1['schemas']['DeliveryIntentManifest'];
                    };
                };
                400: external$2['swagger.yml']['components']['responses']['BadRequestError'];
                401: external$2['swagger.yml']['components']['responses']['UnauthorizedError'];
                403: external$2['swagger.yml']['components']['responses']['ForbiddenError'];
                /** No manifest has ever been published, and the API key does not have preview permissions */
                404: {
                    content: {
                        'text/plain': string;
                    };
                };
                429: external$2['swagger.yml']['components']['responses']['RateLimitError'];
                500: external$2['swagger.yml']['components']['responses']['InternalServerError'];
            };
        };
    };
}
interface components$1 {
    schemas: {
        PreviewIntentManifest: {
            site: {
                id: string;
                name: string;
                url: string;
                intents: components$1['schemas']['PreviewIntent'][];
                enrichments?: components$1['schemas']['Enrichment'][];
                sampleSize?: number;
                tests?: components$1['schemas']['Test'][];
            };
        };
        DeliveryIntentManifest: {
            site: {
                intents: components$1['schemas']['DeliveryIntent'][];
                enrichments?: components$1['schemas']['Enrichment'][];
                sampleSize?: number;
                tests?: components$1['schemas']['Test'][];
            };
        };
        PreviewIntent: components$1['schemas']['DeliveryIntent'] & {
            name: string;
            isPublished: boolean;
            isLatestPublished: boolean;
            description?: string;
        };
        DeliveryIntent: {
            id: string;
            signals: components$1['schemas']['Signal'][];
        };
        Signal: {
            type: string;
            str?: string | number;
            scope?: string;
            freq?: string;
            id?: string;
        };
        Enrichment: {
            name: string;
        };
        Test: {
            name: string;
            winning_variation_id?: string;
        };
    };
}
interface external$2 {
    'swagger.yml': {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        'application/json': external$2['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        'application/json': external$2['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        'application/json': external$2['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

declare type ManifestGet = paths$2['/api/v1/manifest']['get'];
declare type ManifestGetParameters = ManifestGet['parameters']['query'];
declare type ManifestGetResponse = ManifestGet['responses']['200']['content']['application/json'];
declare type DeliveryIntentManifest = components$1['schemas']['DeliveryIntentManifest'];
/** @deprecated use DeliveryIntentManifest instead */
declare type DeliveryAPIResult = DeliveryIntentManifest;
declare type PreviewIntentManifest = components$1['schemas']['PreviewIntentManifest'];
/** @deprecated use PreviewIntentManifest instead */
declare type PreviewAPIResult = PreviewIntentManifest;
declare type PreviewIntent = components$1['schemas']['PreviewIntent'];
declare type DeliveryIntent = components$1['schemas']['DeliveryIntent'];

/** Defines a vector of 0..n intent IDs with their associated strengths. Used for scoring and intent tagging. */
declare type IntentVector = Record<string, IntentAxis>;
/** An individual intent magnitude value in an IntentVector */
interface IntentAxis {
    /** Strength of the intent tag. If unspecified, IntentTagStrength.Normal should be inferred */
    str?: number | string;
}

/** Format of intent tagging data on intent tagged content data */
interface IntentTags {
    intents: IntentTagVector;
}
/** A vector keyed by intent ID which contains magnitude and configuration data for each intent ID that has been tagged */
declare type IntentTagVector = Record<string, IntentTagAxis>;
/** An individual intent tag magnitude value in an IntentTagVector */
interface IntentTagAxis extends IntentAxis {
    /** If this is true, don't use this intent tag when calculating personalization. If false or unspecified, personalization is allowed. */
    noPn?: boolean;
    /** If this is true, don't use this intent tag when calculating behavior. If false or unspecified, behavior is allowed. */
    noBeh?: boolean;
    /**
     * If this is true, ANY strength in the tagged intent will result in selecting this variant to personalize,
     * regardless of other intents' strengths. If more than one tag is override,
     * they are sorted normally.
     */
    override?: boolean;
    /**
     * Sets the minimum visitor score required to trigger this variation.
     * If more than one intent tag matches, the one with the highest threshold will win.
     */
    threshold?: number;
}
/** Standard presets for the strength of an intent tag. Note that values of any integer are valid; these are references to the default strengths. */
declare enum IntentTagStrength {
    Antimatter = 0,
    Tangential = 5,
    Weak = 25,
    Normal = 50,
    Strong = 75,
    Strongest = 100,
    Boost = 1000
}
/**
 * Extracts behavior-enabled intents from an IntentTags record.
 * Note that the caller must still ensure the intents returned actually have
 * a behavior signal before using them.
 */
declare function getBehaviorIntents(tags: IntentTags): IntentTagVector;
/** Extracts personalization-enabled intents from an IntentTags record */
declare function getPersonalizationIntents(tags: IntentTags): IntentTagVector;

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$1 {
    '/api/v1/enrichments': {
        get: {
            parameters: {
                query: {
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': {
                            enrichments: components['schemas']['EnrichmentCategoryWithValues'][];
                        };
                    };
                };
                400: external$1['swagger.yml']['components']['responses']['BadRequestError'];
                401: external$1['swagger.yml']['components']['responses']['UnauthorizedError'];
                429: external$1['swagger.yml']['components']['responses']['RateLimitError'];
                500: external$1['swagger.yml']['components']['responses']['InternalServerError'];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$1['swagger.yml']['components']['responses']['BadRequestError'];
                401: external$1['swagger.yml']['components']['responses']['UnauthorizedError'];
                429: external$1['swagger.yml']['components']['responses']['RateLimitError'];
                500: external$1['swagger.yml']['components']['responses']['InternalServerError'];
            };
            requestBody: {
                content: {
                    'application/json': {
                        enrichment: components['schemas']['EnrichmentCategory'];
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$1['swagger.yml']['components']['responses']['BadRequestError'];
                401: external$1['swagger.yml']['components']['responses']['UnauthorizedError'];
                429: external$1['swagger.yml']['components']['responses']['RateLimitError'];
                500: external$1['swagger.yml']['components']['responses']['InternalServerError'];
            };
            requestBody: {
                content: {
                    'application/json': {
                        enrichmentId: string;
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface components {
    schemas: {
        EnrichmentCategory: {
            /** Public ID of the enrichment category */
            id: string;
            /** Display name of the enrichment category */
            name: string;
            /** Optional sort order of the enrichment category (if not set, sorts by name) */
            sortOrder?: number;
        };
        EnrichmentCategoryWithValues: components['schemas']['EnrichmentCategory'] & {
            values: components['schemas']['EnrichmentValue'][];
        };
        EnrichmentValue: {
            /** Public ID of the enrichment value */
            id: string;
            /** Display name of the enrichment value */
            value: string;
            /** Optional sort order of the enrichment value (if not set, sorts by name) */
            sortOrder?: number;
        };
    };
}
interface external$1 {
    'swagger.yml': {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        'application/json': external$1['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        'application/json': external$1['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        'application/json': external$1['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths {
    '/api/v1/enrichment-values': {
        put: {
            responses: {
                /** OK */
                204: never;
                400: external['swagger.yml']['components']['responses']['BadRequestError'];
                401: external['swagger.yml']['components']['responses']['UnauthorizedError'];
                429: external['swagger.yml']['components']['responses']['RateLimitError'];
                500: external['swagger.yml']['components']['responses']['InternalServerError'];
            };
            requestBody: {
                content: {
                    'application/json': {
                        enrichmentValue: external['v1-enrichments.swagger.yml']['components']['schemas']['EnrichmentValue'];
                        enrichmentId: string;
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external['swagger.yml']['components']['responses']['BadRequestError'];
                401: external['swagger.yml']['components']['responses']['UnauthorizedError'];
                429: external['swagger.yml']['components']['responses']['RateLimitError'];
                500: external['swagger.yml']['components']['responses']['InternalServerError'];
            };
            requestBody: {
                content: {
                    'application/json': {
                        enrichmentId: string;
                        projectId: string;
                        enrichmentValueId: string;
                    };
                };
            };
        };
    };
}
interface external {
    'swagger.yml': {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        'application/json': external['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        'application/json': external['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        'application/json': external['swagger.yml']['components']['schemas']['Error'];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    'v1-enrichments.swagger.yml': {
        paths: {
            '/api/v1/enrichments': {
                get: {
                    parameters: {
                        query: {
                            projectId: string;
                        };
                    };
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                'application/json': {
                                    enrichments: external['v1-enrichments.swagger.yml']['components']['schemas']['EnrichmentCategoryWithValues'][];
                                };
                            };
                        };
                        400: external['swagger.yml']['components']['responses']['BadRequestError'];
                        401: external['swagger.yml']['components']['responses']['UnauthorizedError'];
                        429: external['swagger.yml']['components']['responses']['RateLimitError'];
                        500: external['swagger.yml']['components']['responses']['InternalServerError'];
                    };
                };
                put: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external['swagger.yml']['components']['responses']['BadRequestError'];
                        401: external['swagger.yml']['components']['responses']['UnauthorizedError'];
                        429: external['swagger.yml']['components']['responses']['RateLimitError'];
                        500: external['swagger.yml']['components']['responses']['InternalServerError'];
                    };
                    requestBody: {
                        content: {
                            'application/json': {
                                enrichment: external['v1-enrichments.swagger.yml']['components']['schemas']['EnrichmentCategory'];
                                projectId: string;
                            };
                        };
                    };
                };
                delete: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external['swagger.yml']['components']['responses']['BadRequestError'];
                        401: external['swagger.yml']['components']['responses']['UnauthorizedError'];
                        429: external['swagger.yml']['components']['responses']['RateLimitError'];
                        500: external['swagger.yml']['components']['responses']['InternalServerError'];
                    };
                    requestBody: {
                        content: {
                            'application/json': {
                                enrichmentId: string;
                                projectId: string;
                            };
                        };
                    };
                };
            };
        };
        components: {
            schemas: {
                EnrichmentCategory: {
                    /** Public ID of the enrichment category */
                    id: string;
                    /** Display name of the enrichment category */
                    name: string;
                    /** Optional sort order of the enrichment category (if not set, sorts by name) */
                    sortOrder?: number;
                };
                EnrichmentCategoryWithValues: external['v1-enrichments.swagger.yml']['components']['schemas']['EnrichmentCategory'] & {
                    values: external['v1-enrichments.swagger.yml']['components']['schemas']['EnrichmentValue'][];
                };
                EnrichmentValue: {
                    /** Public ID of the enrichment value */
                    id: string;
                    /** Display name of the enrichment value */
                    value: string;
                    /** Optional sort order of the enrichment value (if not set, sorts by name) */
                    sortOrder?: number;
                };
            };
        };
        operations: {};
    };
}

declare type EnrichmentsGet = paths$1['/api/v1/enrichments']['get'];
declare type EnrichmentsGetParameters = EnrichmentsGet['parameters']['query'];
declare type EnrichmentsGetResponse = EnrichmentsGet['responses']['200']['content']['application/json'];
declare type EnrichmentsPut = paths$1['/api/v1/enrichments']['put'];
declare type EnrichmentsPutParameters = EnrichmentsPut['requestBody']['content']['application/json'];
declare type EnrichmentsDelete = paths$1['/api/v1/enrichments']['delete'];
declare type EnrichmentsDeleteParameters = EnrichmentsDelete['requestBody']['content']['application/json'];
declare type EnrichmentValuesPut = paths['/api/v1/enrichment-values']['put'];
declare type EnrichmentValuesPutParameters = EnrichmentValuesPut['requestBody']['content']['application/json'];
declare type EnrichmentValuesDelete = paths['/api/v1/enrichment-values']['delete'];
declare type EnrichmentValuesDeleteParameters = EnrichmentValuesDelete['requestBody']['content']['application/json'];
/** @deprecated use EnrichmentsGetResponse instead */
declare type EnrichmentsAPIResult = EnrichmentsGetResponse;
declare type EnrichmentCategory = components['schemas']['EnrichmentCategory'];
/** @deprecated use EnrichmentCategory instead */
declare type Enrichment = EnrichmentCategory;
/** @deprecated use EnrichmentCategoryWithValues instead */
declare type EnrichmentWithValues = EnrichmentCategoryWithValues;
declare type EnrichmentCategoryWithValues = components['schemas']['EnrichmentCategoryWithValues'];
declare type EnrichmentValue = components['schemas']['EnrichmentValue'];

declare type LimitPolicy = <ReturnValue>(func: () => Promise<ReturnValue>) => Promise<ReturnValue>;
declare type ClientOptions = {
    /** The Uniform API host to use. Internal use. */
    apiHost?: string;
    /** The Uniform API key to use when sending API requests. This or bearer token must be specified. */
    apiKey?: string | null;
    /** The Uniform bearer token to use. Internal use. */
    bearerToken?: string | null;
    /** The Uniform project ID to connect to */
    projectId?: string | null;
    /** Specify a fetch implementation to use when fetching data. Useful if you want to only polyfill selectively. */
    fetch?: typeof fetch;
    /**
     * Specify how to retry and throttle requests.
     * Default: retry 3x on failures with exponential backoff, up to 10 requests per second.
     * Use createLimitPolicy() to help creating a policy. */
    limitPolicy?: LimitPolicy;
};
declare type ExceptProject<T> = Omit<T, 'projectId'>;

declare class ApiClient {
    protected options: Required<ClientOptions>;
    constructor(options: ClientOptions);
    protected apiClient<TResponse>(fetchUri: URL, options?: RequestInit & {
        /** Whether to expect a JSON response or not */
        expectNoContent?: boolean;
    }): Promise<TResponse>;
    protected createUrl(path: string, queryParams?: Record<string, string | boolean | undefined | null | number>): URL;
}

declare class EnrichmentClient extends ApiClient {
    constructor(options: ClientOptions);
    /** Fetches all enrichments and values for a project, grouped by category */
    getEnrichments(options?: ExceptProject<EnrichmentsGetParameters>): Promise<{
        enrichments: ({
            id: string;
            name: string;
            sortOrder?: number | undefined;
        } & {
            values: {
                id: string;
                value: string;
                sortOrder?: number | undefined;
            }[];
        })[];
    }>;
    /** Updates or creates (based on id) an enrichment category */
    upsertEnrichmentCategory(body: ExceptProject<EnrichmentsPutParameters>): Promise<void>;
    /** Deletes an enrichment category */
    removeEnrichmentCategory(body: ExceptProject<EnrichmentsDeleteParameters>): Promise<void>;
    /** Updates or creates (based on id) an enrichment value within an enrichment category */
    upsertEnrichmentValue(body: ExceptProject<EnrichmentValuesPutParameters>): Promise<void>;
    /** Deletes an enrichment value within an enrichment category. The category is left alone. */
    removeEnrichmentValue(body: ExceptProject<EnrichmentValuesDeleteParameters>): Promise<void>;
}

interface PublishWebhookPayload {
    timestamp: string;
    user: {
        name: string;
        email: string;
    };
    site: {
        name: string;
    };
}

declare enum SignalType {
    Cookie = "CK",
    Event = "EVT",
    Behavior = "BEH",
    LandingPage = "LP",
    PageViewCount = "PVW",
    PageVisited = "PVI",
    QueryString = "QS"
}
declare enum SignalFrequency {
    OncePerVisit = "visit",
    Once = "once",
    Always = "always"
}
declare enum Scope {
    Visit = "visit",
    Visitor = "visitor"
}
declare type Signal = components$1['schemas']['Signal'];

interface StringMatch {
    /** The expression to match on */
    expr?: string;
    /** Case sensitive match */
    cs?: boolean;
    /**
     * How to evaluate a match
     * e: Exact match
     * c: Contains match
     **/
    type: 'exact' | 'contains' | 'exists' | 'notexact' | 'notcontains' | 'notexists';
}
/** Tests if a StringMatch matches a string value */
declare function isStringMatch(value: string | null | undefined, match: StringMatch): boolean;

interface CookieSignal extends Signal {
    type: SignalType.Cookie;
    parameter: string;
    value: StringMatch;
}
declare function isCookieSignal(signal: Pick<Signal, 'type'>): signal is CookieSignal;

interface EventSignal extends Signal {
    type: SignalType.Event;
    label: StringMatch;
    value?: StringMatch;
    category?: StringMatch;
}
declare function isEventSignal(signal: Pick<Signal, 'type'>): signal is EventSignal;

interface BehaviorSignal extends Signal {
    type: SignalType.Behavior;
}
declare function isBehaviorSignal(signal: Pick<Signal, 'type'>): signal is BehaviorSignal;

interface LandingPageSignal extends Signal {
    type: SignalType.LandingPage;
    /** Route path that must be initial visited during current visit to trigger signal */
    path: StringMatch;
}
declare function isLandingPageSignal(signal: Pick<Signal, 'type'>): signal is LandingPageSignal;

interface PageViewCountSignal extends Signal {
    type: SignalType.PageViewCount;
    /** Minimum number of pages viewed to trigger signal */
    min: number;
    /** Maximum number of pages viewed before signal stops */
    max?: number;
}
declare function isPageViewCountSignal(signal: Pick<Signal, 'type'>): signal is PageViewCountSignal;

interface PageVisitedSignal extends Signal {
    type: SignalType.PageVisited;
    /** Route path that must be visited to trigger signal */
    path: StringMatch;
}
declare function isPageVisitedSignal(signal: Pick<Signal, 'type'>): signal is PageVisitedSignal;

interface QueryStringSignal extends Signal {
    type: SignalType.QueryString;
    /** The query string parameter name to match */
    parameter: string;
    /** The value to match on the query string parameter */
    value: StringMatch;
}
declare function isQueryStringSignal(signal: Pick<Signal, 'type'>): signal is QueryStringSignal;

declare type Test = components$1['schemas']['Test'];

export { BehaviorSignal, CookieSignal, DeliveryAPIResult, DeliveryIntent, DeliveryIntentManifest, Enrichment, EnrichmentCategory, EnrichmentCategoryWithValues, EnrichmentClient, EnrichmentValue, EnrichmentValuesDeleteParameters, EnrichmentValuesPutParameters, EnrichmentWithValues, EnrichmentsAPIResult, EnrichmentsDeleteParameters, EnrichmentsGetParameters, EnrichmentsGetResponse, EnrichmentsPutParameters, EventSignal, IntentAxis, IntentTagAxis, IntentTagStrength, IntentTagVector, IntentTags, IntentVector, LandingPageSignal, ManifestGetParameters, ManifestGetResponse, PageViewCountSignal, PageVisitedSignal, PreviewAPIResult, PreviewIntent, PreviewIntentManifest, PublishWebhookPayload, QueryStringSignal, Scope, Signal, SignalFrequency, SignalType, StringMatch, Test, getBehaviorIntents, getPersonalizationIntents, isBehaviorSignal, isCookieSignal, isEventSignal, isLandingPageSignal, isPageViewCountSignal, isPageVisitedSignal, isQueryStringSignal, isStringMatch };
